---
swagger: "2.0"
info:
  description: "Portainer API is an HTTP API served by Portainer. It is used by the\
    \ Portainer UI and everything you can do with the UI can be done using the HTTP\
    \ API.\nExamples are available at https://documentation.portainer.io/api/api-examples/\n\
    You can find out more about Portainer at [http://portainer.io](http://portainer.io)\
    \ and get some support on [Slack](http://portainer.io/slack/).\n\n# Authentication\n\
    \nMost of the API environments(endpoints) require to be authenticated as well\
    \ as some level of authorization to be used.\nPortainer API uses JSON Web Token\
    \ to manage authentication and thus requires you to provide a token in the **Authorization**\
    \ header of each request\nwith the **Bearer** authentication mechanism.\n\nExample:\n\
    \n```\nBearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE\n\
    ```\n\n# Security\n\nEach API environment(endpoint) has an associated access policy,\
    \ it is documented in the description of each environment(endpoint).\n\nDifferent\
    \ access policies are available:\n\n- Public access\n- Authenticated access\n\
    - Restricted access\n- Administrator access\n\n### Public access\n\nNo authentication\
    \ is required to access the environments(endpoints) with this access policy.\n\
    \n### Authenticated access\n\nAuthentication is required to access the environments(endpoints)\
    \ with this access policy.\n\n### Restricted access\n\nAuthentication is required\
    \ to access the environments(endpoints) with this access policy.\nExtra-checks\
    \ might be added to ensure access to the resource is granted. Returned data might\
    \ also be filtered.\n\n### Administrator access\n\nAuthentication as well as an\
    \ administrator role are required to access the environments(endpoints) with this\
    \ access policy.\n\n# Execute Docker requests\n\nPortainer **DO NOT** expose specific\
    \ environments(endpoints) to manage your Docker resources (create a container,\
    \ remove a volume, etc...).\n\nInstead, it acts as a reverse-proxy to the Docker\
    \ HTTP API. This means that you can execute Docker requests **via** the Portainer\
    \ HTTP API.\n\nTo do so, you can use the `/endpoints/{id}/docker` Portainer API\
    \ environment(endpoint) (which is not documented below due to Swagger limitations).\
    \ This environment(endpoint) has a restricted access policy so you still need\
    \ to be authenticated to be able to query this environment(endpoint). Any query\
    \ on this environment(endpoint) will be proxied to the Docker API of the associated\
    \ environment(endpoint) (requests and responses objects are the same as documented\
    \ in the Docker API).\n\n# Private Registry\n\nUsing private registry, you will\
    \ need to pass a based64 encoded JSON string ‘{\"registryId\":\\<registryID value\\\
    >}’ inside the Request Header. The parameter name is \"X-Registry-Auth\".\n\\\
    <registryID value\\> - The registry ID where the repository was created.\n\nExample:\n\
    \n```\neyJyZWdpc3RyeUlkIjoxfQ==\n```\n\n**NOTE**: You can find more information\
    \ on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/)\
    \ as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).\n"
  version: "2.17.1"
  title: "PortainerCE API"
  contact:
    email: "info@portainer.io"
  license:
    name: "zlib"
    url: "https://github.com/portainer/portainer/blob/develop/LICENSE"
basePath: "/api"
tags:
- name: "auth"
  description: "Authenticate against Portainer HTTP API"
- name: "custom_templates"
  description: "Manage Custom Templates"
- name: "edge_groups"
  description: "Manage Edge Groups"
- name: "edge_jobs"
  description: "Manage Edge Jobs"
- name: "edge_stacks"
  description: "Manage Edge Stacks"
- name: "edge_templates"
  description: "Manage Edge Templates"
- name: "edge"
  description: "Manage Edge related environment(endpoint) settings"
- name: "endpoints"
  description: "Manage Docker environments(endpoints)"
- name: "endpoint_groups"
  description: "Manage environment(endpoint) groups"
- name: "kubernetes"
  description: "Manage Kubernetes cluster"
- name: "motd"
  description: "Fetch the message of the day"
- name: "registries"
  description: "Manage Docker registries"
- name: "resource_controls"
  description: "Manage access control on Docker resources"
- name: "roles"
  description: "Manage roles"
- name: "settings"
  description: "Manage Portainer settings"
- name: "users"
  description: "Manage users"
- name: "tags"
  description: "Manage tags"
- name: "teams"
  description: "Manage teams"
- name: "team_memberships"
  description: "Manage team memberships"
- name: "templates"
  description: "Manage App Templates"
- name: "stacks"
  description: "Manage stacks"
- name: "ssl"
  description: "Manage ssl settings"
- name: "upload"
  description: "Upload files"
- name: "webhooks"
  description: "Manage webhooks"
- name: "websocket"
  description: "Create exec sessions using websockets"
- name: "status"
  description: "Information about the Portainer instance"
- name: "system"
  description: "Manage Portainer system"
schemes:
- "http"
- "https"
paths:
  /auth:
    post:
      tags:
      - "auth"
      summary: "Authenticate"
      description: "**Access policy**: public\nUse this environment(endpoint) to authenticate\
        \ against Portainer using a username and password."
      operationId: "AuthenticateUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Credentials used for authentication"
        required: true
        schema:
          $ref: "#/definitions/auth.authenticatePayload"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/auth.authenticateResponse"
        "400":
          description: "Invalid request"
        "422":
          description: "Invalid Credentials"
        "500":
          description: "Server error"
  /auth/logout:
    post:
      tags:
      - "auth"
      summary: "Logout"
      description: "**Access policy**: authenticated"
      operationId: "Logout"
      parameters: []
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "204":
          description: "Success"
        "500":
          description: "Server error"
  /auth/oauth/validate:
    post:
      tags:
      - "auth"
      summary: "Authenticate with OAuth"
      description: "**Access policy**: public"
      operationId: "ValidateOAuth"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "OAuth Credentials used for authentication"
        required: true
        schema:
          $ref: "#/definitions/auth.oauthPayload"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/auth.authenticateResponse"
        "400":
          description: "Invalid request"
        "422":
          description: "Invalid Credentials"
        "500":
          description: "Server error"
  /backup:
    post:
      tags:
      - "backup"
      summary: "Creates an archive with a system data snapshot that could be used\
        \ to restore the system."
      description: "Creates an archive with a system data snapshot that could be used\
        \ to restore the system.\n**Access policy**: admin"
      operationId: "Backup"
      consumes:
      - "application/json"
      produces:
      - "application/octet-stream"
      parameters:
      - in: "body"
        name: "body"
        description: "An object contains the password to encrypt the backup with"
        required: false
        schema:
          $ref: "#/definitions/backup.backupPayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
        "400":
          description: "Invalid request"
        "500":
          description: "Server error"
  /custom_templates:
    get:
      tags:
      - "custom_templates"
      summary: "List available custom templates"
      description: "List available custom templates.\n**Access policy**: authenticated"
      operationId: "CustomTemplateList"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "query"
        description: "Template types"
        required: true
        type: "array"
        items:
          type: "integer"
        collectionFormat: "multi"
        x-exportParamName: "Type_"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/portainer.CustomTemplate"
        "500":
          description: "Server error"
    post:
      tags:
      - "custom_templates"
      summary: "Create a custom template"
      description: "Create a custom template.\n**Access policy**: authenticated"
      operationId: "CustomTemplateCreate"
      consumes:
      - "application/json"
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "method"
        in: "query"
        description: "method for creating template"
        required: true
        type: "string"
        enum:
        - "string"
        - "file"
        - "repository"
        x-exportParamName: "Method"
      - in: "body"
        name: "body_string"
        description: "Required when using method=string"
        required: false
        schema:
          $ref: "#/definitions/customtemplates.customTemplateFromFileContentPayload"
        x-exportParamName: "BodyString"
      - in: "body"
        name: "body_repository"
        description: "Required when using method=repository"
        required: false
        schema:
          $ref: "#/definitions/customtemplates.customTemplateFromGitRepositoryPayload"
        x-exportParamName: "BodyRepository"
      - name: "Title"
        in: "formData"
        description: "Title of the template. required when method is file"
        required: false
        type: "string"
        x-exportParamName: "Title"
        x-optionalDataType: "String"
      - name: "Description"
        in: "formData"
        description: "Description of the template. required when method is file"
        required: false
        type: "string"
        x-exportParamName: "Description"
        x-optionalDataType: "String"
      - name: "Note"
        in: "formData"
        description: "A note that will be displayed in the UI. Supports HTML content"
        required: false
        type: "string"
        x-exportParamName: "Note"
        x-optionalDataType: "String"
      - name: "Platform"
        in: "formData"
        description: "Platform associated to the template (1 - 'linux', 2 - 'windows').\
          \ required when method is file"
        required: false
        type: "integer"
        enum:
        - 1
        - 2
        x-exportParamName: "Platform"
        x-optionalDataType: "Int32"
      - name: "Type"
        in: "formData"
        description: "Type of created stack (1 - swarm, 2 - compose), required when\
          \ method is file"
        required: false
        type: "integer"
        enum:
        - 1
        - 2
        x-exportParamName: "Type_"
        x-optionalDataType: "Int32"
      - name: "file"
        in: "formData"
        description: "required when method is file"
        required: false
        type: "file"
        x-exportParamName: "File"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/portainer.CustomTemplate"
        "400":
          description: "Invalid request"
        "500":
          description: "Server error"
  /custom_templates/{id}:
    get:
      tags:
      - "custom_templates"
      summary: "Inspect a custom template"
      description: "Retrieve details about a template.\n**Access policy**: authenticated"
      operationId: "CustomTemplateInspect"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Template identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.CustomTemplate"
        "400":
          description: "Invalid request"
        "404":
          description: "Template not found"
        "500":
          description: "Server error"
    put:
      tags:
      - "custom_templates"
      summary: "Update a template"
      description: "Update a template.\n**Access policy**: authenticated"
      operationId: "CustomTemplateUpdate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Template identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        description: "Template details"
        required: true
        schema:
          $ref: "#/definitions/customtemplates.customTemplateUpdatePayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.CustomTemplate"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied to access template"
        "404":
          description: "Template not found"
        "500":
          description: "Server error"
    delete:
      tags:
      - "custom_templates"
      summary: "Remove a template"
      description: "Remove a template.\n**Access policy**: authenticated"
      operationId: "CustomTemplateDelete"
      parameters:
      - name: "id"
        in: "path"
        description: "Template identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "204":
          description: "Success"
        "400":
          description: "Invalid request"
        "403":
          description: "Access denied to resource"
        "404":
          description: "Template not found"
        "500":
          description: "Server error"
  /custom_templates/{id}/file:
    get:
      tags:
      - "custom_templates"
      summary: "Get Template stack file content."
      description: "Retrieve the content of the Stack file for the specified custom\
        \ template\n**Access policy**: authenticated"
      operationId: "CustomTemplateFile"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Template identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/customtemplates.fileResponse"
        "400":
          description: "Invalid request"
        "404":
          description: "Custom template not found"
        "500":
          description: "Server error"
  /docker/{environmentId}/containers/{containerId}/gpus:
    get:
      tags:
      - "docker"
      summary: "Fetch container gpus data"
      description: "**Access policy**:"
      operationId: "dockerContainerGpusInspect"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "environmentId"
        in: "path"
        description: "Environment identifier"
        required: true
        type: "integer"
        x-exportParamName: "EnvironmentId"
      - name: "containerId"
        in: "path"
        description: "Container identifier"
        required: true
        type: "integer"
        x-exportParamName: "ContainerId"
      security:
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/containers.containerGpusResponse"
        "400":
          description: "Bad request"
        "404":
          description: "Environment or container not found"
        "500":
          description: "Internal server error"
  /edge_groups:
    get:
      tags:
      - "edge_groups"
      summary: "list EdgeGroups"
      description: "**Access policy**: administrator"
      operationId: "EdgeGroupList"
      produces:
      - "application/json"
      parameters: []
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "EdgeGroups"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/edgegroups.decoratedEdgeGroup"
        "500":
          description: ""
        "503":
          description: "Edge compute features are disabled"
    post:
      tags:
      - "edge_groups"
      summary: "Create an EdgeGroup"
      description: "**Access policy**: administrator"
      operationId: "EdgeGroupCreate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "EdgeGroup data"
        required: true
        schema:
          $ref: "#/definitions/edgegroups.edgeGroupCreatePayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/portainer.EdgeGroup"
        "500":
          description: ""
        "503":
          description: "Edge compute features are disabled"
  /edge_groups/{id}:
    get:
      tags:
      - "edge_groups"
      summary: "Inspects an EdgeGroup"
      description: "**Access policy**: administrator"
      operationId: "EdgeGroupInspect"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "EdgeGroup Id"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/portainer.EdgeGroup"
        "500":
          description: ""
        "503":
          description: "Edge compute features are disabled"
    put:
      tags:
      - "edge_groups"
      summary: "Updates an EdgeGroup"
      description: "**Access policy**: administrator"
      operationId: "EgeGroupUpdate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "EdgeGroup Id"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        description: "EdgeGroup data"
        required: true
        schema:
          $ref: "#/definitions/edgegroups.edgeGroupUpdatePayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/portainer.EdgeGroup"
        "500":
          description: ""
        "503":
          description: "Edge compute features are disabled"
    delete:
      tags:
      - "edge_groups"
      summary: "Deletes an EdgeGroup"
      description: "**Access policy**: administrator"
      operationId: "EdgeGroupDelete"
      parameters:
      - name: "id"
        in: "path"
        description: "EdgeGroup Id"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "204":
          description: ""
        "500":
          description: ""
        "503":
          description: "Edge compute features are disabled"
  /edge_jobs:
    get:
      tags:
      - "edge_jobs"
      summary: "Fetch EdgeJobs list"
      description: "**Access policy**: administrator"
      operationId: "EdgeJobList"
      produces:
      - "application/json"
      parameters: []
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/portainer.EdgeJob"
        "400":
          description: ""
        "500":
          description: ""
        "503":
          description: "Edge compute features are disabled"
    post:
      tags:
      - "edge_jobs"
      summary: "Create an EdgeJob"
      description: "**Access policy**: administrator"
      operationId: "EdgeJobCreate"
      produces:
      - "application/json"
      parameters:
      - name: "method"
        in: "query"
        description: "Creation Method"
        required: true
        type: "string"
        enum:
        - "file"
        - "string"
        x-exportParamName: "Method"
      - in: "body"
        name: "body_string"
        description: "EdgeGroup data when method is string"
        required: true
        schema:
          $ref: "#/definitions/edgejobs.edgeJobCreateFromFileContentPayload"
        x-exportParamName: "BodyString"
      - in: "body"
        name: "body_file"
        description: "EdgeGroup data when method is file"
        required: true
        schema:
          $ref: "#/definitions/edgejobs.edgeJobCreateFromFilePayload"
        x-exportParamName: "BodyFile"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/portainer.EdgeGroup"
        "500":
          description: ""
        "503":
          description: "Edge compute features are disabled"
  /edge_jobs/{id}:
    get:
      tags:
      - "edge_jobs"
      summary: "Inspect an EdgeJob"
      description: "**Access policy**: administrator"
      operationId: "EdgeJobInspect"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "EdgeJob Id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/portainer.EdgeJob"
        "400":
          description: ""
        "500":
          description: ""
        "503":
          description: "Edge compute features are disabled"
    post:
      tags:
      - "edge_jobs"
      summary: "Update an EdgeJob"
      description: "**Access policy**: administrator"
      operationId: "EdgeJobUpdate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "EdgeJob Id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        description: "EdgeGroup data"
        required: true
        schema:
          $ref: "#/definitions/edgejobs.edgeJobUpdatePayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/portainer.EdgeJob"
        "400":
          description: ""
        "500":
          description: ""
        "503":
          description: "Edge compute features are disabled"
    delete:
      tags:
      - "edge_jobs"
      summary: "Delete an EdgeJob"
      description: "**Access policy**: administrator"
      operationId: "EdgeJobDelete"
      parameters:
      - name: "id"
        in: "path"
        description: "EdgeJob Id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "204":
          description: ""
        "400":
          description: ""
        "500":
          description: ""
        "503":
          description: "Edge compute features are disabled"
  /edge_jobs/{id}/file:
    get:
      tags:
      - "edge_jobs"
      summary: "Fetch a file of an EdgeJob"
      description: "**Access policy**: administrator"
      operationId: "EdgeJobFile"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "EdgeJob Id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/edgejobs.edgeJobFileResponse"
        "400":
          description: ""
        "500":
          description: ""
        "503":
          description: "Edge compute features are disabled"
  /edge_jobs/{id}/tasks:
    get:
      tags:
      - "edge_jobs"
      summary: "Fetch the list of tasks on an EdgeJob"
      description: "**Access policy**: administrator"
      operationId: "EdgeJobTasksList"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "EdgeJob Id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/edgejobs.taskContainer"
        "400":
          description: ""
        "500":
          description: ""
        "503":
          description: "Edge compute features are disabled"
  /edge_jobs/{id}/tasks/{taskID}/logs:
    get:
      tags:
      - "edge_jobs"
      summary: "Fetch the log for a specifc task on an EdgeJob"
      description: "**Access policy**: administrator"
      operationId: "EdgeJobTaskLogsInspect"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "EdgeJob Id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "taskID"
        in: "path"
        description: "Task Id"
        required: true
        type: "string"
        x-exportParamName: "TaskID"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/edgejobs.fileResponse"
        "400":
          description: ""
        "500":
          description: ""
        "503":
          description: "Edge compute features are disabled"
    post:
      tags:
      - "edge_jobs"
      summary: "Collect the log for a specifc task on an EdgeJob"
      description: "**Access policy**: administrator"
      operationId: "EdgeJobTasksCollect"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "EdgeJob Id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "taskID"
        in: "path"
        description: "Task Id"
        required: true
        type: "string"
        x-exportParamName: "TaskID"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "204":
          description: ""
        "400":
          description: ""
        "500":
          description: ""
        "503":
          description: "Edge compute features are disabled"
    delete:
      tags:
      - "edge_jobs"
      summary: "Clear the log for a specifc task on an EdgeJob"
      description: "**Access policy**: administrator"
      operationId: "EdgeJobTasksClear"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "EdgeJob Id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "taskID"
        in: "path"
        description: "Task Id"
        required: true
        type: "string"
        x-exportParamName: "TaskID"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "204":
          description: ""
        "400":
          description: ""
        "500":
          description: ""
        "503":
          description: "Edge compute features are disabled"
  /edge_stacks:
    get:
      tags:
      - "edge_stacks"
      summary: "Fetches the list of EdgeStacks"
      description: "**Access policy**: administrator"
      operationId: "EdgeStackList"
      produces:
      - "application/json"
      parameters: []
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/portainer.EdgeStack"
        "400":
          description: ""
        "500":
          description: ""
        "503":
          description: "Edge compute features are disabled"
    post:
      tags:
      - "edge_stacks"
      summary: "Create an EdgeStack"
      description: "**Access policy**: administrator"
      operationId: "EdgeStackCreate"
      produces:
      - "application/json"
      parameters:
      - name: "method"
        in: "query"
        description: "Creation Method"
        required: true
        type: "string"
        enum:
        - "file"
        - "string"
        - "repository"
        x-exportParamName: "Method"
      - in: "body"
        name: "body_string"
        description: "Required when using method=string"
        required: true
        schema:
          $ref: "#/definitions/edgestacks.swarmStackFromFileContentPayload"
        x-exportParamName: "BodyString"
      - in: "body"
        name: "body_file"
        description: "Required when using method=file"
        required: true
        schema:
          $ref: "#/definitions/edgestacks.swarmStackFromFileUploadPayload"
        x-exportParamName: "BodyFile"
      - in: "body"
        name: "body_repository"
        description: "Required when using method=repository"
        required: true
        schema:
          $ref: "#/definitions/edgestacks.swarmStackFromGitRepositoryPayload"
        x-exportParamName: "BodyRepository"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/portainer.EdgeStack"
        "500":
          description: ""
        "503":
          description: "Edge compute features are disabled"
  /edge_stacks/{id}:
    get:
      tags:
      - "edge_stacks"
      summary: "Inspect an EdgeStack"
      description: "**Access policy**: administrator"
      operationId: "EdgeStackInspect"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "EdgeStack Id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/portainer.EdgeStack"
        "400":
          description: ""
        "500":
          description: ""
        "503":
          description: "Edge compute features are disabled"
    put:
      tags:
      - "edge_stacks"
      summary: "Update an EdgeStack"
      description: "**Access policy**: administrator"
      operationId: "EdgeStackUpdate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "EdgeStack Id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        description: "EdgeStack data"
        required: true
        schema:
          $ref: "#/definitions/edgestacks.updateEdgeStackPayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/portainer.EdgeStack"
        "400":
          description: ""
        "500":
          description: ""
        "503":
          description: "Edge compute features are disabled"
    delete:
      tags:
      - "edge_stacks"
      summary: "Delete an EdgeStack"
      description: "**Access policy**: administrator"
      operationId: "EdgeStackDelete"
      parameters:
      - name: "id"
        in: "path"
        description: "EdgeStack Id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "204":
          description: ""
        "400":
          description: ""
        "500":
          description: ""
        "503":
          description: "Edge compute features are disabled"
  /edge_stacks/{id}/file:
    get:
      tags:
      - "edge_stacks"
      summary: "Fetches the stack file for an EdgeStack"
      description: "**Access policy**: administrator"
      operationId: "EdgeStackFile"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "EdgeStack Id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/edgestacks.stackFileResponse"
        "400":
          description: ""
        "500":
          description: ""
        "503":
          description: "Edge compute features are disabled"
  /edge_stacks/{id}/status:
    put:
      tags:
      - "edge_stacks"
      summary: "Update an EdgeStack status"
      description: "Authorized only if the request is done by an Edge Environment(Endpoint)"
      operationId: "EdgeStackStatusUpdate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "EdgeStack Id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/portainer.EdgeStack"
        "400":
          description: ""
        "403":
          description: ""
        "404":
          description: ""
        "500":
          description: ""
  /edge_stacks/{id}/status/{endpoint_id}:
    delete:
      tags:
      - "edge_stacks"
      summary: "Delete an EdgeStack status"
      description: "Authorized only if the request is done by an Edge Environment(Endpoint)"
      operationId: "EdgeStackStatusDelete"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "EdgeStack Id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/portainer.EdgeStack"
        "400":
          description: ""
        "403":
          description: ""
        "404":
          description: ""
        "500":
          description: ""
  /edge_templates:
    get:
      tags:
      - "edge_templates"
      summary: "Fetches the list of Edge Templates"
      description: "**Access policy**: administrator"
      operationId: "EdgeTemplateList"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/portainer.Template"
        "500":
          description: ""
  /endpoint_groups:
    get:
      tags:
      - "endpoint_groups"
      summary: "List Environment(Endpoint) groups"
      description: "List all environment(endpoint) groups based on the current user\
        \ authorizations. Will\nreturn all environment(endpoint) groups if using an\
        \ administrator account otherwise it will\nonly return authorized environment(endpoint)\
        \ groups.\n**Access policy**: restricted"
      operationId: "EndpointGroupList"
      produces:
      - "application/json"
      parameters: []
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Environment(Endpoint) group"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/portainer.EndpointGroup"
        "500":
          description: "Server error"
    post:
      tags:
      - "endpoint_groups"
      summary: "Create an Environment(Endpoint) Group"
      description: "Create a new environment(endpoint) group.\n**Access policy**:\
        \ administrator"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Environment(Endpoint) Group details"
        required: true
        schema:
          $ref: "#/definitions/endpointgroups.endpointGroupCreatePayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.EndpointGroup"
        "400":
          description: "Invalid request"
        "500":
          description: "Server error"
  /endpoint_groups/{id}:
    get:
      tags:
      - "endpoint_groups"
      summary: "Inspect an Environment(Endpoint) group"
      description: "Retrieve details abont an environment(endpoint) group.\n**Access\
        \ policy**: administrator"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Environment(Endpoint) group identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.EndpointGroup"
        "400":
          description: "Invalid request"
        "404":
          description: "EndpointGroup not found"
        "500":
          description: "Server error"
    put:
      tags:
      - "endpoint_groups"
      summary: "Update an environment(endpoint) group"
      description: "Update an environment(endpoint) group.\n**Access policy**: administrator"
      operationId: "EndpointGroupUpdate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "EndpointGroup identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        description: "EndpointGroup details"
        required: true
        schema:
          $ref: "#/definitions/endpointgroups.endpointGroupUpdatePayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.EndpointGroup"
        "400":
          description: "Invalid request"
        "404":
          description: "EndpointGroup not found"
        "500":
          description: "Server error"
    delete:
      tags:
      - "endpoint_groups"
      summary: "Remove an environment(endpoint) group"
      description: "Remove an environment(endpoint) group.\n**Access policy**: administrator"
      operationId: "EndpointGroupDelete"
      parameters:
      - name: "id"
        in: "path"
        description: "EndpointGroup identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "204":
          description: "Success"
        "400":
          description: "Invalid request"
        "404":
          description: "EndpointGroup not found"
        "500":
          description: "Server error"
  /endpoint_groups/{id}/endpoints/{endpointId}:
    put:
      tags:
      - "endpoint_groups"
      summary: "Add an environment(endpoint) to an environment(endpoint) group"
      description: "Add an environment(endpoint) to an environment(endpoint) group\n\
        **Access policy**: administrator"
      operationId: "EndpointGroupAddEndpoint"
      parameters:
      - name: "id"
        in: "path"
        description: "EndpointGroup identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - name: "endpointId"
        in: "path"
        description: "Environment(Endpoint) identifier"
        required: true
        type: "integer"
        x-exportParamName: "EndpointId"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "204":
          description: "Success"
        "400":
          description: "Invalid request"
        "404":
          description: "EndpointGroup not found"
        "500":
          description: "Server error"
    delete:
      tags:
      - "endpoint_groups"
      summary: "Removes environment(endpoint) from an environment(endpoint) group"
      description: "**Access policy**: administrator"
      operationId: "EndpointGroupDeleteEndpoint"
      parameters:
      - name: "id"
        in: "path"
        description: "EndpointGroup identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - name: "endpointId"
        in: "path"
        description: "Environment(Endpoint) identifier"
        required: true
        type: "integer"
        x-exportParamName: "EndpointId"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "204":
          description: "Success"
        "400":
          description: "Invalid request"
        "404":
          description: "EndpointGroup not found"
        "500":
          description: "Server error"
  /endpoints:
    get:
      tags:
      - "endpoints"
      summary: "List environments(endpoints)"
      description: "List all environments(endpoints) based on the current user authorizations.\
        \ Will\nreturn all environments(endpoints) if using an administrator or team\
        \ leader account otherwise it will\nonly return authorized environments(endpoints).\n\
        **Access policy**: restricted"
      operationId: "EndpointList"
      produces:
      - "application/json"
      parameters:
      - name: "start"
        in: "query"
        description: "Start searching from"
        required: false
        type: "integer"
        x-exportParamName: "Start"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "Limit results to this value"
        required: false
        type: "integer"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "sort"
        in: "query"
        description: "Sort results by this value"
        required: false
        type: "integer"
        x-exportParamName: "Sort"
        x-optionalDataType: "Int32"
      - name: "order"
        in: "query"
        description: "Order sorted results by desc/asc"
        required: false
        type: "integer"
        x-exportParamName: "Order"
        x-optionalDataType: "Int32"
      - name: "search"
        in: "query"
        description: "Search query"
        required: false
        type: "string"
        x-exportParamName: "Search"
        x-optionalDataType: "String"
      - name: "groupIds"
        in: "query"
        description: "List environments(endpoints) of these groups"
        required: false
        type: "array"
        items:
          type: "integer"
        collectionFormat: "multi"
        x-exportParamName: "GroupIds"
      - name: "status"
        in: "query"
        description: "List environments(endpoints) by this status"
        required: false
        type: "array"
        items:
          type: "integer"
        collectionFormat: "multi"
        x-exportParamName: "Status"
      - name: "types"
        in: "query"
        description: "List environments(endpoints) of this type"
        required: false
        type: "array"
        items:
          type: "integer"
        collectionFormat: "multi"
        x-exportParamName: "Types"
      - name: "tagIds"
        in: "query"
        description: "search environments(endpoints) with these tags (depends on tagsPartialMatch)"
        required: false
        type: "array"
        items:
          type: "integer"
        collectionFormat: "multi"
        x-exportParamName: "TagIds"
      - name: "tagsPartialMatch"
        in: "query"
        description: "If true, will return environment(endpoint) which has one of\
          \ tagIds, if false (or missing) will return only environments(endpoints)\
          \ that has all the tags"
        required: false
        type: "boolean"
        x-exportParamName: "TagsPartialMatch"
        x-optionalDataType: "Bool"
      - name: "endpointIds"
        in: "query"
        description: "will return only these environments(endpoints)"
        required: false
        type: "array"
        items:
          type: "integer"
        collectionFormat: "multi"
        x-exportParamName: "EndpointIds"
      - name: "provisioned"
        in: "query"
        description: "If true, will return environment(endpoint) that were provisioned"
        required: false
        type: "boolean"
        x-exportParamName: "Provisioned"
        x-optionalDataType: "Bool"
      - name: "agentVersions"
        in: "query"
        description: "will return only environments with on of these agent versions"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "AgentVersions"
      - name: "edgeDevice"
        in: "query"
        description: "if exists true show only edge devices, false show only regular\
          \ edge endpoints. if missing, will show both types (relevant only for edge\
          \ endpoints)"
        required: false
        type: "boolean"
        x-exportParamName: "EdgeDevice"
        x-optionalDataType: "Bool"
      - name: "edgeDeviceUntrusted"
        in: "query"
        description: "if true, show only untrusted endpoints, if false show only trusted\
          \ (relevant only for edge devices, and if edgeDevice is true)"
        required: false
        type: "boolean"
        x-exportParamName: "EdgeDeviceUntrusted"
        x-optionalDataType: "Bool"
      - name: "name"
        in: "query"
        description: "will return only environments(endpoints) with this name"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Endpoints"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/portainer.Endpoint"
        "500":
          description: "Server error"
    post:
      tags:
      - "endpoints"
      summary: "Create a new environment(endpoint)"
      description: "Create a new environment(endpoint) that will be used to manage\
        \ an environment(endpoint).\n**Access policy**: administrator"
      operationId: "EndpointCreate"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "Name"
        in: "formData"
        description: "Name that will be used to identify this environment(endpoint)\
          \ (example: my-environment)"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "EndpointCreationType"
        in: "formData"
        description: "Environment(Endpoint) type. Value must be one of: 1 (Local Docker\
          \ environment), 2 (Agent environment), 3 (Azure environment), 4 (Edge agent\
          \ environment) or 5 (Local Kubernetes Environment"
        required: true
        type: "integer"
        x-exportParamName: "EndpointCreationType"
      - name: "URL"
        in: "formData"
        description: "URL or IP address of a Docker host (example: docker.mydomain.tld:2375).\
          \ Defaults to local if not specified (Linux: /var/run/docker.sock, Windows:\
          \ //./pipe/docker_engine)"
        required: false
        type: "string"
        x-exportParamName: "URL"
        x-optionalDataType: "String"
      - name: "PublicURL"
        in: "formData"
        description: "URL or IP address where exposed containers will be reachable.\
          \ Defaults to URL if not specified (example: docker.mydomain.tld:2375)"
        required: false
        type: "string"
        x-exportParamName: "PublicURL"
        x-optionalDataType: "String"
      - name: "GroupID"
        in: "formData"
        description: "Environment(Endpoint) group identifier. If not specified will\
          \ default to 1 (unassigned)."
        required: false
        type: "integer"
        x-exportParamName: "GroupID"
        x-optionalDataType: "Int32"
      - name: "TLS"
        in: "formData"
        description: "Require TLS to connect against this environment(endpoint)"
        required: false
        type: "boolean"
        x-exportParamName: "TLS"
        x-optionalDataType: "Bool"
      - name: "TLSSkipVerify"
        in: "formData"
        description: "Skip server verification when using TLS"
        required: false
        type: "boolean"
        x-exportParamName: "TLSSkipVerify"
        x-optionalDataType: "Bool"
      - name: "TLSSkipClientVerify"
        in: "formData"
        description: "Skip client verification when using TLS"
        required: false
        type: "boolean"
        x-exportParamName: "TLSSkipClientVerify"
        x-optionalDataType: "Bool"
      - name: "TLSCACertFile"
        in: "formData"
        description: "TLS CA certificate file"
        required: false
        type: "file"
        x-exportParamName: "TLSCACertFile"
      - name: "TLSCertFile"
        in: "formData"
        description: "TLS client certificate file"
        required: false
        type: "file"
        x-exportParamName: "TLSCertFile"
      - name: "TLSKeyFile"
        in: "formData"
        description: "TLS client key file"
        required: false
        type: "file"
        x-exportParamName: "TLSKeyFile"
      - name: "AzureApplicationID"
        in: "formData"
        description: "Azure application ID. Required if environment(endpoint) type\
          \ is set to 3"
        required: false
        type: "string"
        x-exportParamName: "AzureApplicationID"
        x-optionalDataType: "String"
      - name: "AzureTenantID"
        in: "formData"
        description: "Azure tenant ID. Required if environment(endpoint) type is set\
          \ to 3"
        required: false
        type: "string"
        x-exportParamName: "AzureTenantID"
        x-optionalDataType: "String"
      - name: "AzureAuthenticationKey"
        in: "formData"
        description: "Azure authentication key. Required if environment(endpoint)\
          \ type is set to 3"
        required: false
        type: "string"
        x-exportParamName: "AzureAuthenticationKey"
        x-optionalDataType: "String"
      - name: "TagIDs"
        in: "formData"
        description: "List of tag identifiers to which this environment(endpoint)\
          \ is associated"
        required: false
        type: "array"
        items:
          type: "integer"
        collectionFormat: "multi"
        x-exportParamName: "TagIDs"
      - name: "EdgeCheckinInterval"
        in: "formData"
        description: "The check in interval for edge agent (in seconds)"
        required: false
        type: "integer"
        x-exportParamName: "EdgeCheckinInterval"
        x-optionalDataType: "Int32"
      - name: "EdgeTunnelServerAddress"
        in: "formData"
        description: "URL or IP address that will be used to establish a reverse tunnel"
        required: true
        type: "string"
        x-exportParamName: "EdgeTunnelServerAddress"
      - name: "IsEdgeDevice"
        in: "formData"
        description: "Is Edge Device"
        required: false
        type: "boolean"
        x-exportParamName: "IsEdgeDevice"
        x-optionalDataType: "Bool"
      - name: "Gpus"
        in: "formData"
        description: "List of GPUs"
        required: false
        type: "array"
        collectionFormat: "multi"
        x-exportParamName: "Gpus"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.Endpoint"
        "400":
          description: "Invalid request"
        "500":
          description: "Server error"
  /endpoints/{id}:
    get:
      tags:
      - "endpoints"
      summary: "Inspect an environment(endpoint)"
      description: "Retrieve details about an environment(endpoint).\n**Access policy**:\
        \ restricted"
      operationId: "EndpointInspect"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Environment(Endpoint) identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.Endpoint"
        "400":
          description: "Invalid request"
        "404":
          description: "Environment(Endpoint) not found"
        "500":
          description: "Server error"
    put:
      tags:
      - "endpoints"
      summary: "Update an environment(endpoint)"
      description: "Update an environment(endpoint).\n**Access policy**: authenticated"
      operationId: "EndpointUpdate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Environment(Endpoint) identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        description: "Environment(Endpoint) details"
        required: true
        schema:
          $ref: "#/definitions/endpoints.endpointUpdatePayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.Endpoint"
        "400":
          description: "Invalid request"
        "404":
          description: "Environment(Endpoint) not found"
        "500":
          description: "Server error"
    delete:
      tags:
      - "endpoints"
      summary: "Remove an environment(endpoint)"
      description: "Remove an environment(endpoint).\n**Access policy**: administrator"
      operationId: "EndpointDelete"
      parameters:
      - name: "id"
        in: "path"
        description: "Environment(Endpoint) identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "204":
          description: "Success"
        "400":
          description: "Invalid request"
        "404":
          description: "Environment(Endpoint) not found"
        "500":
          description: "Server error"
  /endpoints/{id}/association:
    put:
      tags:
      - "endpoints"
      summary: "De-association an edge environment(endpoint)"
      description: "De-association an edge environment(endpoint).\n**Access policy**:\
        \ administrator"
      operationId: "EndpointAssociationDelete"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Environment(Endpoint) identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "204":
          description: "Success"
        "400":
          description: "Invalid request"
        "404":
          description: "Environment(Endpoint) not found"
        "500":
          description: "Server error"
  /endpoints/{id}/dockerhub/{registryId}:
    get:
      tags:
      - "endpoints"
      summary: "fetch docker pull limits"
      description: "get docker pull limits for a docker hub registry in the environment\n\
        **Access policy**:"
      operationId: "endpointDockerhubStatus"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "endpoint ID"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - name: "registryId"
        in: "path"
        description: "registry ID"
        required: true
        type: "integer"
        x-exportParamName: "RegistryId"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/endpoints.dockerhubStatusResponse"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied"
        "404":
          description: "registry or endpoint not found"
        "500":
          description: "Server error"
  /endpoints/{id}/edge/jobs/{jobID}/logs:
    post:
      tags:
      - "edge"
      - "endpoints"
      summary: "Inspect an EdgeJob Log"
      description: "**Access policy**: public"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "environment(endpoint) Id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "jobID"
        in: "path"
        description: "Job Id"
        required: true
        type: "string"
        x-exportParamName: "JobID"
      responses:
        "200":
          description: ""
        "400":
          description: ""
        "500":
          description: ""
  /endpoints/{id}/edge/stacks/{stackId}:
    get:
      tags:
      - "edge"
      - "endpoints"
      - "edge_stacks"
      summary: "Inspect an Edge Stack for an Environment(Endpoint)"
      description: "**Access policy**: public"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "environment(endpoint) Id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "stackId"
        in: "path"
        description: "EdgeStack Id"
        required: true
        type: "string"
        x-exportParamName: "StackId"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/endpointedge.configResponse"
        "400":
          description: ""
        "404":
          description: ""
        "500":
          description: ""
  /endpoints/{id}/edge/status:
    get:
      tags:
      - "endpoints"
      summary: "Get environment(endpoint) status"
      description: "environment(endpoint) for edge agent to check status of environment(endpoint)\n\
        **Access policy**: restricted only to Edge environments(endpoints)"
      operationId: "EndpointEdgeStatusInspect"
      parameters:
      - name: "id"
        in: "path"
        description: "Environment(Endpoint) identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/endpointedge.endpointEdgeStatusInspectResponse"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied to access environment(endpoint)"
        "404":
          description: "Environment(Endpoint) not found"
        "500":
          description: "Server error"
  /endpoints/{id}/kubernetes/helm:
    get:
      tags:
      - "helm"
      summary: "List Helm Releases"
      description: "**Access policy**: authenticated"
      operationId: "HelmList"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Environment(Endpoint) identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - name: "namespace"
        in: "query"
        description: "specify an optional namespace"
        required: true
        type: "string"
        x-exportParamName: "Namespace"
      - name: "filter"
        in: "query"
        description: "specify an optional filter"
        required: true
        type: "string"
        x-exportParamName: "Filter"
      - name: "selector"
        in: "query"
        description: "specify an optional selector"
        required: true
        type: "string"
        x-exportParamName: "Selector"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/release.ReleaseElement"
        "400":
          description: "Invalid environment(endpoint) identifier"
        "401":
          description: "Unauthorized"
        "404":
          description: "Environment(Endpoint) or ServiceAccount not found"
        "500":
          description: "Server error"
    post:
      tags:
      - "helm"
      summary: "Install Helm Chart"
      description: "**Access policy**: authenticated"
      operationId: "HelmInstall"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Environment(Endpoint) identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - in: "body"
        name: "payload"
        description: "Chart details"
        required: true
        schema:
          $ref: "#/definitions/helm.installChartPayload"
        x-exportParamName: "Payload"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/release.Release"
        "401":
          description: "Unauthorized"
        "404":
          description: "Environment(Endpoint) or ServiceAccount not found"
        "500":
          description: "Server error"
  /endpoints/{id}/kubernetes/helm/{release}:
    delete:
      tags:
      - "helm"
      summary: "Delete Helm Release"
      description: "**Access policy**: authenticated"
      operationId: "HelmDelete"
      parameters:
      - name: "id"
        in: "path"
        description: "Environment(Endpoint) identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - name: "release"
        in: "path"
        description: "The name of the release/application to uninstall"
        required: true
        type: "string"
        x-exportParamName: "Release"
      - name: "namespace"
        in: "query"
        description: "An optional namespace"
        required: true
        type: "string"
        x-exportParamName: "Namespace"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "204":
          description: "Success"
        "400":
          description: "Invalid environment(endpoint) id or bad request"
        "401":
          description: "Unauthorized"
        "404":
          description: "Environment(Endpoint) or ServiceAccount not found"
        "500":
          description: "Server error or helm error"
  /endpoints/{id}/kubernetes/helm/repositories:
    get:
      tags:
      - "helm"
      summary: "List a users helm repositories"
      description: "Inspect a user helm repositories.\n**Access policy**: authenticated"
      operationId: "HelmUserRepositoriesList"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "User identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/helm.helmUserRepositoryResponse"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied"
        "500":
          description: "Server error"
    post:
      tags:
      - "helm"
      summary: "Create a user helm repository"
      description: "Create a user helm repository.\n**Access policy**: authenticated"
      operationId: "HelmUserRepositoryCreate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Environment(Endpoint) identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - in: "body"
        name: "payload"
        description: "Helm Repository"
        required: true
        schema:
          $ref: "#/definitions/helm.addHelmRepoUrlPayload"
        x-exportParamName: "Payload"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.HelmUserRepository"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied"
        "500":
          description: "Server error"
  /endpoints/{id}/registries:
    get:
      tags:
      - "endpoints"
      summary: "List Registries on environment"
      description: "List all registries based on the current user authorizations in\
        \ current environment.\n**Access policy**: authenticated"
      operationId: "endpointRegistriesList"
      produces:
      - "application/json"
      parameters:
      - name: "namespace"
        in: "query"
        description: "required if kubernetes environment, will show registries by\
          \ namespace"
        required: false
        type: "string"
        x-exportParamName: "Namespace"
        x-optionalDataType: "String"
      - name: "id"
        in: "path"
        description: "Environment(Endpoint) identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/portainer.Registry"
        "500":
          description: "Server error"
  /endpoints/{id}/registries/{registryId}:
    put:
      tags:
      - "endpoints"
      summary: "update registry access for environment"
      description: "**Access policy**: authenticated"
      operationId: "endpointRegistryAccess"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Environment(Endpoint) identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - name: "registryId"
        in: "path"
        description: "Registry identifier"
        required: true
        type: "integer"
        x-exportParamName: "RegistryId"
      - in: "body"
        name: "body"
        description: "details"
        required: true
        schema:
          $ref: "#/definitions/endpoints.registryAccessPayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "204":
          description: "Success"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied"
        "404":
          description: "Endpoint not found"
        "500":
          description: "Server error"
  /endpoints/{id}/settings:
    put:
      tags:
      - "endpoints"
      summary: "Update settings for an environment(endpoint)"
      description: "Update settings for an environment(endpoint).\n**Access policy**:\
        \ authenticated"
      operationId: "EndpointSettingsUpdate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Environment(Endpoint) identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        description: "Environment(Endpoint) details"
        required: true
        schema:
          $ref: "#/definitions/endpoints.endpointSettingsUpdatePayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.Endpoint"
        "400":
          description: "Invalid request"
        "404":
          description: "Environment(Endpoint) not found"
        "500":
          description: "Server error"
  /endpoints/{id}/snapshot:
    post:
      tags:
      - "endpoints"
      summary: "Snapshots an environment(endpoint)"
      description: "Snapshots an environment(endpoint)\n**Access policy**: administrator"
      operationId: "EndpointSnapshot"
      parameters:
      - name: "id"
        in: "path"
        description: "Environment(Endpoint) identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "204":
          description: "Success"
        "400":
          description: "Invalid request"
        "404":
          description: "Environment(Endpoint) not found"
        "500":
          description: "Server error"
  /endpoints/global-key:
    post:
      tags:
      - "endpoints"
      summary: "Create or retrieve the endpoint for an EdgeID"
      operationId: "EndpointCreateGlobalKey"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/endpoints.endpointCreateGlobalKeyResponse"
        "400":
          description: "Invalid request"
        "500":
          description: "Server error"
  /endpoints/snapshot:
    post:
      tags:
      - "endpoints"
      summary: "Snapshot all environments(endpoints)"
      description: "Snapshot all environments(endpoints)\n**Access policy**: administrator"
      operationId: "EndpointSnapshots"
      parameters: []
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "204":
          description: "Success"
        "500":
          description: "Server Error"
  /fdo:
    post:
      tags:
      - "intel"
      summary: "Enable Portainer's FDO capabilities"
      description: "Enable Portainer's FDO capabilities\n**Access policy**: administrator"
      operationId: "fdoConfigure"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "FDO Settings"
        required: true
        schema:
          $ref: "#/definitions/fdo.fdoConfigurePayload"
        x-exportParamName: "Body"
      security:
      - jwt: []
      responses:
        "204":
          description: "Success"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied to access settings"
        "500":
          description: "Server error"
  /fdo/configure/{guid}:
    post:
      tags:
      - "intel"
      summary: "configures an FDO device"
      description: "configures an FDO device\n**Access policy**: administrator"
      operationId: "fdoConfigureDevice"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Device Configuration"
        required: true
        schema:
          $ref: "#/definitions/fdo.deviceConfigurePayload"
        x-exportParamName: "Body"
      security:
      - jwt: []
      responses:
        "200":
          description: "Success"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied to access settings"
        "500":
          description: "Server error"
  /fdo/list:
    get:
      tags:
      - "intel"
      summary: "List all known FDO vouchers"
      description: "List all known FDO vouchers\n**Access policy**: administrator"
      operationId: "fdoListAll"
      produces:
      - "application/json"
      parameters: []
      security:
      - jwt: []
      responses:
        "200":
          description: "Success"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied to access settings"
        "500":
          description: "Server error"
  /fdo/profiles:
    get:
      tags:
      - "intel"
      summary: "retrieves all FDO profiles"
      description: "retrieves all FDO profiles\n**Access policy**: administrator"
      operationId: "fdoProfileList"
      produces:
      - "application/json"
      parameters: []
      security:
      - jwt: []
      responses:
        "200":
          description: "Success"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied to access settings"
        "500":
          description: "Bad gateway"
    post:
      tags:
      - "intel"
      summary: "creates a new FDO Profile"
      description: "creates a new FDO Profile\n**Access policy**: administrator"
      operationId: "createProfile"
      produces:
      - "application/json"
      parameters: []
      security:
      - jwt: []
      responses:
        "200":
          description: "Success"
        "400":
          description: "Invalid request"
        "409":
          description: "Profile name already exists"
        "500":
          description: "Server error"
  /fdo/profiles/{id}:
    get:
      tags:
      - "intel"
      summary: "retrieves a given FDO profile information and content"
      description: "retrieves a given FDO profile information and content\n**Access\
        \ policy**: administrator"
      operationId: "fdoProfileInspect"
      produces:
      - "application/json"
      parameters: []
      security:
      - jwt: []
      responses:
        "200":
          description: "Success"
        "400":
          description: "Invalid request"
        "500":
          description: "Server error"
    put:
      tags:
      - "intel"
      summary: "updates an existing FDO Profile"
      description: "updates an existing FDO Profile\n**Access policy**: administrator"
      operationId: "updateProfile"
      produces:
      - "application/json"
      parameters: []
      security:
      - jwt: []
      responses:
        "200":
          description: "Success"
        "400":
          description: "Invalid request"
        "409":
          description: "Profile name already exists"
        "500":
          description: "Server error"
    delete:
      tags:
      - "intel"
      summary: "deletes a FDO Profile"
      description: "deletes a FDO Profile\n**Access policy**: administrator"
      operationId: "deleteProfile"
      produces:
      - "application/json"
      parameters: []
      security:
      - jwt: []
      responses:
        "200":
          description: "Success"
        "400":
          description: "Invalid request"
        "500":
          description: "Server error"
  /fdo/profiles/{id}/duplicate:
    post:
      tags:
      - "intel"
      summary: "duplicated an existing FDO Profile"
      description: "duplicated an existing FDO Profile\n**Access policy**: administrator"
      operationId: "duplicate"
      produces:
      - "application/json"
      parameters: []
      security:
      - jwt: []
      responses:
        "200":
          description: "Success"
        "400":
          description: "Invalid request"
        "500":
          description: "Server error"
  /fdo/register:
    post:
      tags:
      - "intel"
      summary: "register an FDO device"
      description: "register an FDO device\n**Access policy**: administrator"
      operationId: "fdoRegisterDevice"
      produces:
      - "application/json"
      parameters: []
      security:
      - jwt: []
      responses:
        "200":
          description: "Success"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied to access settings"
        "500":
          description: "Server error"
  /kubernetes/{id}/namespaces/{namespace}/system:
    put:
      tags:
      - "kubernetes"
      summary: "Toggle the system state for a namespace"
      description: "Toggle the system state for a namespace\n**Access policy**: administrator\
        \ or environment(endpoint) admin"
      operationId: "KubernetesNamespacesToggleSystem"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Environment(Endpoint) identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - name: "namespace"
        in: "path"
        description: "Namespace name"
        required: true
        type: "string"
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        description: "Update details"
        required: true
        schema:
          $ref: "#/definitions/kubernetes.namespacesToggleSystemPayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
        "400":
          description: "Invalid request"
        "404":
          description: "Environment(Endpoint) not found"
        "500":
          description: "Server error"
  /kubernetes/{id}/nodes_limits:
    get:
      tags:
      - "kubernetes"
      summary: "Get CPU and memory limits of all nodes within k8s cluster"
      description: "Get CPU and memory limits of all nodes within k8s cluster\n**Access\
        \ policy**: authenticated"
      operationId: "getKubernetesNodesLimits"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Environment(Endpoint) identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.K8sNodesLimits"
        "400":
          description: "Invalid request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Permission denied"
        "404":
          description: "Environment(Endpoint) not found"
        "500":
          description: "Server error"
  /kubernetes/{id}/rbac_enabled:
    get:
      tags:
      - "rbac_enabled"
      summary: "Check if RBAC is enabled"
      description: "Check if RBAC is enabled in the current Kubernetes cluster.\n\
        **Access policy**: administrator"
      operationId: "IsRBACEnabled"
      produces:
      - "text/plain"
      parameters:
      - name: "id"
        in: "path"
        description: "Environment(Endpoint) identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
        "500":
          description: "Server error"
  /kubernetes/config:
    get:
      tags:
      - "kubernetes"
      summary: "Generates kubeconfig file enabling client communication with k8s api\
        \ server"
      description: "Generates kubeconfig file enabling client communication with k8s\
        \ api server\n**Access policy**: authenticated"
      operationId: "GetKubernetesConfig"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "ids"
        in: "query"
        description: "will include only these environments(endpoints)"
        required: false
        type: "array"
        items:
          type: "integer"
        collectionFormat: "multi"
        x-exportParamName: "Ids"
      - name: "excludeIds"
        in: "query"
        description: "will exclude these environments(endpoints)"
        required: false
        type: "array"
        items:
          type: "integer"
        collectionFormat: "multi"
        x-exportParamName: "ExcludeIds"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
        "400":
          description: "Invalid request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Permission denied"
        "404":
          description: "Environment(Endpoint) or ServiceAccount not found"
        "500":
          description: "Server error"
  /ldap/check:
    post:
      tags:
      - "ldap"
      summary: "Test LDAP connectivity"
      description: "Test LDAP connectivity using LDAP details\n**Access policy**:\
        \ administrator"
      operationId: "LDAPCheck"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "details"
        required: true
        schema:
          $ref: "#/definitions/ldap.checkPayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "204":
          description: "Success"
        "400":
          description: "Invalid request"
        "500":
          description: "Server error"
  /motd:
    get:
      tags:
      - "motd"
      summary: "fetches the message of the day"
      description: "**Access policy**: restricted"
      operationId: "MOTD"
      produces:
      - "application/json"
      parameters: []
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/motd.motdResponse"
  /open_amt:
    post:
      tags:
      - "intel"
      summary: "Enable Portainer's OpenAMT capabilities"
      description: "Enable Portainer's OpenAMT capabilities\n**Access policy**: administrator"
      operationId: "OpenAMTConfigure"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "OpenAMT Settings"
        required: true
        schema:
          $ref: "#/definitions/openamt.openAMTConfigurePayload"
        x-exportParamName: "Body"
      security:
      - jwt: []
      responses:
        "204":
          description: "Success"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied to access settings"
        "500":
          description: "Server error"
  /open_amt/{id}/activate:
    post:
      tags:
      - "intel"
      summary: "Activate OpenAMT device and associate to agent endpoint"
      description: "Activate OpenAMT device and associate to agent endpoint\n**Access\
        \ policy**: administrator"
      operationId: "openAMTActivate"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Environment(Endpoint) identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - jwt: []
      responses:
        "200":
          description: "Success"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied to access settings"
        "500":
          description: "Server error"
  /open_amt/{id}/devices:
    get:
      tags:
      - "intel"
      summary: "Fetch OpenAMT managed devices information for endpoint"
      description: "Fetch OpenAMT managed devices information for endpoint\n**Access\
        \ policy**: administrator"
      operationId: "OpenAMTDevices"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Environment(Endpoint) identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - jwt: []
      responses:
        "200":
          description: "Success"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied to access settings"
        "500":
          description: "Server error"
  /open_amt/{id}/devices/{deviceId}/action:
    post:
      tags:
      - "intel"
      summary: "Execute out of band action on an AMT managed device"
      description: "Execute out of band action on an AMT managed device\n**Access\
        \ policy**: administrator"
      operationId: "DeviceAction"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Device Action"
        required: true
        schema:
          $ref: "#/definitions/openamt.deviceActionPayload"
        x-exportParamName: "Body"
      security:
      - jwt: []
      responses:
        "204":
          description: "Success"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied to access settings"
        "500":
          description: "Server error"
  /open_amt/{id}/devices_features/{deviceId}:
    post:
      tags:
      - "intel"
      summary: "Enable features on an AMT managed device"
      description: "Enable features on an AMT managed device\n**Access policy**: administrator"
      operationId: "DeviceFeatures"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Device Features"
        required: true
        schema:
          $ref: "#/definitions/openamt.deviceFeaturesPayload"
        x-exportParamName: "Body"
      security:
      - jwt: []
      responses:
        "204":
          description: "Success"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied to access settings"
        "500":
          description: "Server error"
  /open_amt/{id}/info:
    get:
      tags:
      - "intel"
      summary: "Request OpenAMT info from a node"
      description: "Request OpenAMT info from a node\n**Access policy**: administrator"
      operationId: "OpenAMTHostInfo"
      produces:
      - "application/json"
      parameters: []
      security:
      - jwt: []
      responses:
        "200":
          description: "Success"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied to access settings"
        "500":
          description: "Server error"
  /registries:
    get:
      tags:
      - "registries"
      summary: "List Registries"
      description: "List all registries based on the current user authorizations.\n\
        Will return all registries if using an administrator account otherwise it\n\
        will only return authorized registries.\n**Access policy**: restricted"
      operationId: "RegistryList"
      produces:
      - "application/json"
      parameters: []
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/portainer.Registry"
        "500":
          description: "Server error"
    post:
      tags:
      - "registries"
      summary: "Create a new registry"
      description: "Create a new registry.\n**Access policy**: restricted"
      operationId: "RegistryCreate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Registry details"
        required: true
        schema:
          $ref: "#/definitions/registries.registryCreatePayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.Registry"
        "400":
          description: "Invalid request"
        "500":
          description: "Server error"
  /registries/{id}:
    get:
      tags:
      - "registries"
      summary: "Inspect a registry"
      description: "Retrieve details about a registry.\n**Access policy**: restricted"
      operationId: "RegistryInspect"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Registry identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.Registry"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied to access registry"
        "404":
          description: "Registry not found"
        "500":
          description: "Server error"
    put:
      tags:
      - "registries"
      summary: "Update a registry"
      description: "Update a registry\n**Access policy**: restricted"
      operationId: "RegistryUpdate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Registry identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        description: "Registry details"
        required: true
        schema:
          $ref: "#/definitions/registries.registryUpdatePayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.Registry"
        "400":
          description: "Invalid request"
        "404":
          description: "Registry not found"
        "409":
          description: "Another registry with the same URL already exists"
        "500":
          description: "Server error"
    delete:
      tags:
      - "registries"
      summary: "Remove a registry"
      description: "Remove a registry\n**Access policy**: restricted"
      operationId: "RegistryDelete"
      parameters:
      - name: "id"
        in: "path"
        description: "Registry identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "204":
          description: "Success"
        "400":
          description: "Invalid request"
        "404":
          description: "Registry not found"
        "500":
          description: "Server error"
  /registries/{id}/configure:
    post:
      tags:
      - "registries"
      summary: "Configures a registry"
      description: "Configures a registry.\n**Access policy**: restricted"
      operationId: "RegistryConfigure"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Registry identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        description: "Registry configuration"
        required: true
        schema:
          $ref: "#/definitions/registries.registryConfigurePayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "204":
          description: "Success"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied"
        "404":
          description: "Registry not found"
        "500":
          description: "Server error"
  /resource_controls:
    post:
      tags:
      - "resource_controls"
      summary: "Create a new resource control"
      description: "Create a new resource control to restrict access to a Docker resource.\n\
        **Access policy**: administrator"
      operationId: "ResourceControlCreate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Resource control details"
        required: true
        schema:
          $ref: "#/definitions/resourcecontrols.resourceControlCreatePayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.ResourceControl"
        "400":
          description: "Invalid request"
        "409":
          description: "Resource control already exists"
        "500":
          description: "Server error"
  /resource_controls/{id}:
    put:
      tags:
      - "resource_controls"
      summary: "Update a resource control"
      description: "Update a resource control\n**Access policy**: authenticated"
      operationId: "ResourceControlUpdate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Resource control identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        description: "Resource control details"
        required: true
        schema:
          $ref: "#/definitions/resourcecontrols.resourceControlUpdatePayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.ResourceControl"
        "400":
          description: "Invalid request"
        "403":
          description: "Unauthorized"
        "404":
          description: "Resource control not found"
        "500":
          description: "Server error"
    delete:
      tags:
      - "resource_controls"
      summary: "Remove a resource control"
      description: "Remove a resource control.\n**Access policy**: administrator"
      operationId: "ResourceControlDelete"
      parameters:
      - name: "id"
        in: "path"
        description: "Resource control identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "204":
          description: "Success"
        "400":
          description: "Invalid request"
        "404":
          description: "Resource control not found"
        "500":
          description: "Server error"
  /restore:
    post:
      tags:
      - "backup"
      summary: "Triggers a system restore using provided backup file"
      description: "Triggers a system restore using provided backup file\n**Access\
        \ policy**: public"
      operationId: "Restore"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "restorePayload"
        description: "Restore request payload"
        required: true
        schema:
          $ref: "#/definitions/backup.restorePayload"
        x-exportParamName: "RestorePayload"
      responses:
        "200":
          description: "Success"
        "400":
          description: "Invalid request"
        "500":
          description: "Server error"
  /roles:
    get:
      tags:
      - "roles"
      summary: "List roles"
      description: "List all roles available for use\n**Access policy**: administrator"
      operationId: "RoleList"
      produces:
      - "application/json"
      parameters: []
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/portainer.Role"
        "500":
          description: "Server error"
  /settings:
    get:
      tags:
      - "settings"
      summary: "Retrieve Portainer settings"
      description: "Retrieve Portainer settings.\n**Access policy**: administrator"
      operationId: "SettingsInspect"
      produces:
      - "application/json"
      parameters: []
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.Settings"
        "500":
          description: "Server error"
    put:
      tags:
      - "settings"
      summary: "Update Portainer settings"
      description: "Update Portainer settings.\n**Access policy**: administrator"
      operationId: "SettingsUpdate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "New settings"
        required: true
        schema:
          $ref: "#/definitions/settings.settingsUpdatePayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.Settings"
        "400":
          description: "Invalid request"
        "500":
          description: "Server error"
  /settings/public:
    get:
      tags:
      - "settings"
      summary: "Retrieve Portainer public settings"
      description: "Retrieve public settings. Returns a small set of settings that\
        \ are not reserved to administrators only.\n**Access policy**: public"
      operationId: "SettingsPublic"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/settings.publicSettingsResponse"
        "500":
          description: "Server error"
  /ssl:
    get:
      tags:
      - "ssl"
      summary: "Inspect the ssl settings"
      description: "Retrieve the ssl settings.\n**Access policy**: administrator"
      operationId: "SSLInspect"
      produces:
      - "application/json"
      parameters: []
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.SSLSettings"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied to access settings"
        "500":
          description: "Server error"
    put:
      tags:
      - "ssl"
      summary: "Update the ssl settings"
      description: "Update the ssl settings.\n**Access policy**: administrator"
      operationId: "SSLUpdate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "SSL Settings"
        required: true
        schema:
          $ref: "#/definitions/ssl.sslUpdatePayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "204":
          description: "Success"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied to access settings"
        "500":
          description: "Server error"
  /stacks:
    get:
      tags:
      - "stacks"
      summary: "List stacks"
      description: "List all stacks based on the current user authorizations.\nWill\
        \ return all stacks if using an administrator account otherwise it\nwill only\
        \ return the list of stacks the user have access to.\n**Access policy**: authenticated"
      operationId: "StackList"
      parameters:
      - name: "filters"
        in: "query"
        description: "Filters to process on the stack list. Encoded as JSON (a map[string]string).\
          \ For example, {'SwarmID': 'jpofkc0i9uo9wtx1zesuk649w'} will only return\
          \ stacks that are part of the specified Swarm cluster. Available filters:\
          \ EndpointID, SwarmID."
        required: false
        type: "string"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/portainer.Stack"
        "204":
          description: "Success"
        "400":
          description: "Invalid request"
        "500":
          description: "Server error"
    post:
      tags:
      - "stacks"
      summary: "Deploy a new stack"
      description: "Deploy a new stack into a Docker environment(endpoint) specified\
        \ via the environment(endpoint) identifier.\n**Access policy**: authenticated"
      operationId: "StackCreate"
      consumes:
      - "application/json"
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "query"
        description: "Stack deployment type. Possible values: 1 (Swarm stack), 2 (Compose\
          \ stack) or 3 (Kubernetes stack)."
        required: true
        type: "integer"
        enum:
        - 1
        - 2
        - 3
        x-exportParamName: "Type_"
      - name: "method"
        in: "query"
        description: "Stack deployment method. Possible values: file, string, repository\
          \ or url."
        required: true
        type: "string"
        enum:
        - "string"
        - "file"
        - "repository"
        - "url"
        x-exportParamName: "Method"
      - name: "endpointId"
        in: "query"
        description: "Identifier of the environment(endpoint) that will be used to\
          \ deploy the stack"
        required: true
        type: "integer"
        x-exportParamName: "EndpointId"
      - in: "body"
        name: "body_swarm_string"
        description: "Required when using method=string and type=1"
        required: false
        schema:
          $ref: "#/definitions/stacks.swarmStackFromFileContentPayload"
        x-exportParamName: "BodySwarmString"
      - in: "body"
        name: "body_swarm_repository"
        description: "Required when using method=repository and type=1"
        required: false
        schema:
          $ref: "#/definitions/stacks.swarmStackFromGitRepositoryPayload"
        x-exportParamName: "BodySwarmRepository"
      - in: "body"
        name: "body_compose_string"
        description: "Required when using method=string and type=2"
        required: false
        schema:
          $ref: "#/definitions/stacks.composeStackFromFileContentPayload"
        x-exportParamName: "BodyComposeString"
      - in: "body"
        name: "body_compose_repository"
        description: "Required when using method=repository and type=2"
        required: false
        schema:
          $ref: "#/definitions/stacks.composeStackFromGitRepositoryPayload"
        x-exportParamName: "BodyComposeRepository"
      - in: "body"
        name: "body_kubernetes_string"
        description: "Required when using method=string and type=3"
        required: false
        schema:
          $ref: "#/definitions/stacks.kubernetesStringDeploymentPayload"
        x-exportParamName: "BodyKubernetesString"
      - in: "body"
        name: "body_kubernetes_repository"
        description: "Required when using method=repository and type=3"
        required: false
        schema:
          $ref: "#/definitions/stacks.kubernetesGitDeploymentPayload"
        x-exportParamName: "BodyKubernetesRepository"
      - in: "body"
        name: "body_kubernetes_url"
        description: "Required when using method=url and type=3"
        required: false
        schema:
          $ref: "#/definitions/stacks.kubernetesManifestURLDeploymentPayload"
        x-exportParamName: "BodyKubernetesUrl"
      - name: "Name"
        in: "formData"
        description: "Name of the stack. required when method is file"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "SwarmID"
        in: "formData"
        description: "Swarm cluster identifier. Required when method equals file and\
          \ type equals 1. required when method is file"
        required: false
        type: "string"
        x-exportParamName: "SwarmID"
        x-optionalDataType: "String"
      - name: "Env"
        in: "formData"
        description: "Environment(Endpoint) variables passed during deployment, represented\
          \ as a JSON array [{'name': 'name', 'value': 'value'}]. Optional, used when\
          \ method equals file and type equals 1."
        required: false
        type: "string"
        x-exportParamName: "Env"
        x-optionalDataType: "String"
      - name: "file"
        in: "formData"
        description: "Stack file. required when method is file"
        required: false
        type: "file"
        x-exportParamName: "File"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/portainer.CustomTemplate"
        "400":
          description: "Invalid request"
        "500":
          description: "Server error"
  /stacks/{id}:
    get:
      tags:
      - "stacks"
      summary: "Inspect a stack"
      description: "Retrieve details about a stack.\n**Access policy**: restricted"
      operationId: "StackInspect"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Stack identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.Stack"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied"
        "404":
          description: "Stack not found"
        "500":
          description: "Server error"
    put:
      tags:
      - "stacks"
      summary: "Update a stack"
      description: "Update a stack, only for file based stacks.\n**Access policy**:\
        \ authenticated"
      operationId: "StackUpdate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Stack identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - name: "endpointId"
        in: "query"
        description: "Stacks created before version 1.18.0 might not have an associated\
          \ environment(endpoint) identifier. Use this optional parameter to set the\
          \ environment(endpoint) identifier used by the stack."
        required: false
        type: "integer"
        x-exportParamName: "EndpointId"
        x-optionalDataType: "Int32"
      - in: "body"
        name: "body"
        description: "Stack details"
        required: true
        schema:
          $ref: "#/definitions/stacks.updateSwarmStackPayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.Stack"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied"
        "404":
          description: "Not found"
        "500":
          description: "Server error"
    delete:
      tags:
      - "stacks"
      summary: "Remove a stack"
      description: "Remove a stack.\n**Access policy**: restricted"
      operationId: "StackDelete"
      parameters:
      - name: "id"
        in: "path"
        description: "Stack identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - name: "external"
        in: "query"
        description: "Set to true to delete an external stack. Only external Swarm\
          \ stacks are supported"
        required: false
        type: "boolean"
        x-exportParamName: "External"
        x-optionalDataType: "Bool"
      - name: "endpointId"
        in: "query"
        description: "Environment(Endpoint) identifier used to remove an external\
          \ stack (required when external is set to true)"
        required: false
        type: "integer"
        x-exportParamName: "EndpointId"
        x-optionalDataType: "Int32"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "204":
          description: "Success"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied"
        "404":
          description: "Not found"
        "500":
          description: "Server error"
  /stacks/{id}/associate:
    put:
      tags:
      - "stacks"
      summary: "Associate an orphaned stack to a new environment(endpoint)"
      description: "**Access policy**: administrator"
      operationId: "StackAssociate"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Stack identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - name: "endpointId"
        in: "query"
        description: "Stacks created before version 1.18.0 might not have an associated\
          \ environment(endpoint) identifier. Use this optional parameter to set the\
          \ environment(endpoint) identifier used by the stack."
        required: true
        type: "integer"
        x-exportParamName: "EndpointId"
      - name: "swarmId"
        in: "query"
        description: "Swarm identifier"
        required: true
        type: "integer"
        x-exportParamName: "SwarmId"
      - name: "orphanedRunning"
        in: "query"
        description: "Indicates whether the stack is orphaned"
        required: true
        type: "boolean"
        x-exportParamName: "OrphanedRunning"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.Stack"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied"
        "404":
          description: "Stack not found"
        "500":
          description: "Server error"
  /stacks/{id}/file:
    get:
      tags:
      - "stacks"
      summary: "Retrieve the content of the Stack file for the specified stack"
      description: "Get Stack file content.\n**Access policy**: restricted"
      operationId: "StackFileInspect"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Stack identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/stacks.stackFileResponse"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied"
        "404":
          description: "Stack not found"
        "500":
          description: "Server error"
  /stacks/{id}/git:
    post:
      tags:
      - "stacks"
      summary: "Update a stack's Git configs"
      description: "Update the Git settings in a stack, e.g., RepositoryReferenceName\
        \ and AutoUpdate\n**Access policy**: authenticated"
      operationId: "StackUpdateGit"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Stack identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - name: "endpointId"
        in: "query"
        description: "Stacks created before version 1.18.0 might not have an associated\
          \ environment(endpoint) identifier. Use this optional parameter to set the\
          \ environment(endpoint) identifier used by the stack."
        required: false
        type: "integer"
        x-exportParamName: "EndpointId"
        x-optionalDataType: "Int32"
      - in: "body"
        name: "body"
        description: "Git configs for pull and redeploy a stack"
        required: true
        schema:
          $ref: "#/definitions/stacks.stackGitUpdatePayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.Stack"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied"
        "404":
          description: "Not found"
        "500":
          description: "Server error"
  /stacks/{id}/git/redeploy:
    put:
      tags:
      - "stacks"
      summary: "Redeploy a stack"
      description: "Pull and redeploy a stack via Git\n**Access policy**: authenticated"
      operationId: "StackGitRedeploy"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Stack identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - name: "endpointId"
        in: "query"
        description: "Stacks created before version 1.18.0 might not have an associated\
          \ environment(endpoint) identifier. Use this optional parameter to set the\
          \ environment(endpoint) identifier used by the stack."
        required: false
        type: "integer"
        x-exportParamName: "EndpointId"
        x-optionalDataType: "Int32"
      - in: "body"
        name: "body"
        description: "Git configs for pull and redeploy a stack"
        required: true
        schema:
          $ref: "#/definitions/stacks.stackGitRedployPayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.Stack"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied"
        "404":
          description: "Not found"
        "500":
          description: "Server error"
  /stacks/{id}/migrate:
    post:
      tags:
      - "stacks"
      summary: "Migrate a stack to another environment(endpoint)"
      description: "Migrate a stack from an environment(endpoint) to another environment(endpoint).\
        \ It will re-create the stack inside the target environment(endpoint) before\
        \ removing the original stack.\n**Access policy**: authenticated"
      operationId: "StackMigrate"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Stack identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - name: "endpointId"
        in: "query"
        description: "Stacks created before version 1.18.0 might not have an associated\
          \ environment(endpoint) identifier. Use this optional parameter to set the\
          \ environment(endpoint) identifier used by the stack."
        required: false
        type: "integer"
        x-exportParamName: "EndpointId"
        x-optionalDataType: "Int32"
      - in: "body"
        name: "body"
        description: "Stack migration details"
        required: true
        schema:
          $ref: "#/definitions/stacks.stackMigratePayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.Stack"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied"
        "404":
          description: "Stack not found"
        "500":
          description: "Server error"
  /stacks/{id}/start:
    post:
      tags:
      - "stacks"
      summary: "Starts a stopped Stack"
      description: "Starts a stopped Stack.\n**Access policy**: authenticated"
      operationId: "StackStart"
      parameters:
      - name: "id"
        in: "path"
        description: "Stack identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.Stack"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied"
        "404":
          description: "Not found"
        "500":
          description: "Server error"
  /stacks/{id}/stop:
    post:
      tags:
      - "stacks"
      summary: "Stops a stopped Stack"
      description: "Stops a stopped Stack.\n**Access policy**: authenticated"
      operationId: "StackStop"
      parameters:
      - name: "id"
        in: "path"
        description: "Stack identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.Stack"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied"
        "404":
          description: "Not found"
        "500":
          description: "Server error"
  /stacks/webhooks/{webhookID}:
    post:
      tags:
      - "stacks"
      summary: "Webhook for triggering stack updates from git"
      description: "**Access policy**: public"
      operationId: "WebhookInvoke"
      parameters:
      - name: "webhookID"
        in: "path"
        description: "Stack identifier"
        required: true
        type: "string"
        x-exportParamName: "WebhookID"
      responses:
        "200":
          description: "Success"
        "400":
          description: "Invalid request"
        "409":
          description: "Conflict"
        "500":
          description: "Server error"
  /status:
    get:
      tags:
      - "status"
      summary: "Check Portainer status"
      description: "Deprecated: use the `/system/status` endpoint instead.\nRetrieve\
        \ Portainer status\n**Access policy**: public"
      operationId: "StatusInspect"
      produces:
      - "application/json"
      parameters: []
      deprecated: true
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/system.status"
  /status/nodes:
    get:
      tags:
      - "status"
      summary: "Retrieve the count of nodes"
      description: "Deprecated: use the `/system/nodes` endpoint instead.\n**Access\
        \ policy**: authenticated"
      operationId: "statusNodesCount"
      produces:
      - "application/json"
      parameters: []
      security:
      - ApiKeyAuth: []
      - jwt: []
      deprecated: true
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/system.nodesCountResponse"
        "500":
          description: "Server error"
  /status/version:
    get:
      tags:
      - "status"
      summary: "Check for portainer updates"
      description: "Deprecated: use the `/system/version` endpoint instead.\nCheck\
        \ if portainer has an update available\n**Access policy**: authenticated"
      operationId: "Version"
      produces:
      - "application/json"
      parameters: []
      security:
      - ApiKeyAuth: []
      - jwt: []
      deprecated: true
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/system.versionResponse"
  /system/info:
    get:
      tags:
      - "system"
      summary: "Retrieve system info"
      description: "**Access policy**: authenticated"
      operationId: "systemInfo"
      produces:
      - "application/json"
      parameters: []
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/system.systemInfoResponse"
        "500":
          description: "Server error"
  /system/nodes:
    get:
      tags:
      - "system"
      summary: "Retrieve the count of nodes"
      description: "**Access policy**: authenticated"
      operationId: "systemNodesCount"
      produces:
      - "application/json"
      parameters: []
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/system.nodesCountResponse"
        "500":
          description: "Server error"
  /system/status:
    get:
      tags:
      - "system"
      summary: "Check Portainer status"
      description: "Retrieve Portainer status\n**Access policy**: public"
      operationId: "systemStatus"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/system.status"
  /system/upgrade:
    post:
      tags:
      - "system"
      summary: "Upgrade Portainer to BE"
      description: "Upgrade Portainer to BE\n**Access policy**: administrator"
      operationId: "systemUpgrade"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/system.status"
  /system/version:
    get:
      tags:
      - "system"
      summary: "Check for portainer updates"
      description: "Check if portainer has an update available\n**Access policy**:\
        \ authenticated"
      operationId: "systemVersion"
      produces:
      - "application/json"
      parameters: []
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/system.versionResponse"
  /tags:
    get:
      tags:
      - "tags"
      summary: "List tags"
      description: "List tags.\n**Access policy**: authenticated"
      operationId: "TagList"
      produces:
      - "application/json"
      parameters: []
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/portainer.Tag"
        "500":
          description: "Server error"
    post:
      tags:
      - "tags"
      summary: "Create a new tag"
      description: "Create a new tag.\n**Access policy**: administrator"
      operationId: "TagCreate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Tag details"
        required: true
        schema:
          $ref: "#/definitions/tags.tagCreatePayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.Tag"
        "409":
          description: "Tag name exists"
        "500":
          description: "Server error"
  /tags/{id}:
    delete:
      tags:
      - "tags"
      summary: "Remove a tag"
      description: "Remove a tag.\n**Access policy**: administrator"
      operationId: "TagDelete"
      parameters:
      - name: "id"
        in: "path"
        description: "Tag identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "204":
          description: "Success"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied"
        "404":
          description: "Tag not found"
        "500":
          description: "Server error"
  /team:
    post:
      tags:
      - "teams"
      summary: "Create a new team"
      description: "Create a new team.\n**Access policy**: administrator"
      operationId: "TeamCreate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "details"
        required: true
        schema:
          $ref: "#/definitions/teams.teamCreatePayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.Team"
        "400":
          description: "Invalid request"
        "409":
          description: "Team already exists"
        "500":
          description: "Server error"
  /team/{id}:
    put:
      tags:
      - "teams"
      summary: "Update a team"
      description: "Update a team.\n**Access policy**: administrator"
      operationId: "TeamUpdate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Team identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        description: "Team details"
        required: true
        schema:
          $ref: "#/definitions/teams.teamUpdatePayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.Team"
        "204":
          description: "Success"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied"
        "404":
          description: "Team not found"
        "500":
          description: "Server error"
  /team_memberships:
    get:
      tags:
      - "team_memberships"
      summary: "List team memberships"
      description: "List team memberships. Access is only available to administrators\
        \ and team leaders.\n**Access policy**: administrator"
      operationId: "TeamMembershipList"
      produces:
      - "application/json"
      parameters: []
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/portainer.TeamMembership"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied"
        "500":
          description: "Server error"
    post:
      tags:
      - "team_memberships"
      summary: "Create a new team membership"
      description: "Create a new team memberships. Access is only available to administrators\
        \ leaders of the associated team.\n**Access policy**: administrator"
      operationId: "TeamMembershipCreate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Team membership details"
        required: true
        schema:
          $ref: "#/definitions/teammemberships.teamMembershipCreatePayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.TeamMembership"
        "204":
          description: "Success"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied to manage memberships"
        "409":
          description: "Team membership already registered"
        "500":
          description: "Server error"
  /team_memberships/{id}:
    put:
      tags:
      - "team_memberships"
      summary: "Update a team membership"
      description: "Update a team membership. Access is only available to administrators\
        \ or leaders of the associated team.\n**Access policy**: administrator or\
        \ leaders of the associated team"
      operationId: "TeamMembershipUpdate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Team membership identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        description: "Team membership details"
        required: true
        schema:
          $ref: "#/definitions/teammemberships.teamMembershipUpdatePayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.TeamMembership"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied"
        "404":
          description: "TeamMembership not found"
        "500":
          description: "Server error"
    delete:
      tags:
      - "team_memberships"
      summary: "Remove a team membership"
      description: "Remove a team membership. Access is only available to administrators\
        \ leaders of the associated team.\n**Access policy**: administrator"
      operationId: "TeamMembershipDelete"
      parameters:
      - name: "id"
        in: "path"
        description: "TeamMembership identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "204":
          description: "Success"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied"
        "404":
          description: "TeamMembership not found"
        "500":
          description: "Server error"
  /teams:
    get:
      tags:
      - "teams"
      summary: "List teams"
      description: "List teams. For non-administrator users, will only list the teams\
        \ they are member of.\n**Access policy**: restricted"
      operationId: "TeamList"
      produces:
      - "application/json"
      parameters:
      - name: "onlyLedTeams"
        in: "query"
        description: "Only list teams that the user is leader of"
        required: false
        type: "boolean"
        x-exportParamName: "OnlyLedTeams"
        x-optionalDataType: "Bool"
      - name: "environmentId"
        in: "query"
        description: "Identifier of the environment(endpoint) that will be used to\
          \ filter the authorized teams"
        required: false
        type: "integer"
        x-exportParamName: "EnvironmentId"
        x-optionalDataType: "Int32"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/portainer.Team"
        "500":
          description: "Server error"
  /teams/{id}:
    get:
      tags:
      - "teams"
      summary: "Inspect a team"
      description: "Retrieve details about a team. Access is only available for administrator\
        \ and leaders of that team.\n**Access policy**: administrator"
      operationId: "TeamInspect"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Team identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.Team"
        "204":
          description: "Success"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied"
        "404":
          description: "Team not found"
        "500":
          description: "Server error"
    delete:
      tags:
      - "teams"
      summary: "Remove a team"
      description: "Remove a team.\n**Access policy**: administrator"
      operationId: "TeamDelete"
      parameters:
      - name: "id"
        in: "path"
        description: "Team Id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "204":
          description: "Success"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied"
        "404":
          description: "Team not found"
        "500":
          description: "Server error"
  /teams/{id}/memberships:
    get:
      tags:
      - "team_memberships"
      summary: "List team memberships"
      description: "List team memberships. Access is only available to administrators\
        \ and team leaders.\n**Access policy**: restricted"
      operationId: "TeamMemberships"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Team Id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/portainer.TeamMembership"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied"
        "500":
          description: "Server error"
  /templates:
    get:
      tags:
      - "templates"
      summary: "List available templates"
      description: "List available templates.\n**Access policy**: authenticated"
      operationId: "TemplateList"
      produces:
      - "application/json"
      parameters: []
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/templates.listResponse"
        "500":
          description: "Server error"
  /templates/file:
    post:
      tags:
      - "templates"
      summary: "Get a template's file"
      description: "Get a template's file\n**Access policy**: authenticated"
      operationId: "TemplateFile"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "File details"
        required: true
        schema:
          $ref: "#/definitions/templates.filePayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/templates.fileResponse"
        "400":
          description: "Invalid request"
        "500":
          description: "Server error"
  /templates/helm:
    get:
      tags:
      - "helm"
      summary: "Search Helm Charts"
      description: "**Access policy**: authenticated"
      operationId: "HelmRepoSearch"
      produces:
      - "application/json"
      parameters:
      - name: "repo"
        in: "query"
        description: "Helm repository URL"
        required: true
        type: "string"
        x-exportParamName: "Repo"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            type: "string"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "404":
          description: "Not found"
        "500":
          description: "Server error"
  /templates/helm/{command}:
    get:
      tags:
      - "helm"
      summary: "Show Helm Chart Information"
      description: "**Access policy**: authenticated"
      operationId: "HelmShow"
      consumes:
      - "application/json"
      produces:
      - "text/plain"
      parameters:
      - name: "repo"
        in: "query"
        description: "Helm repository URL"
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "chart"
        in: "query"
        description: "Chart name"
        required: true
        type: "string"
        x-exportParamName: "Chart"
      - name: "command"
        in: "path"
        description: "chart/values/readme"
        required: true
        type: "string"
        x-exportParamName: "Command"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            type: "string"
        "401":
          description: "Unauthorized"
        "404":
          description: "Environment(Endpoint) or ServiceAccount not found"
        "500":
          description: "Server error"
  /upload/tls/{certificate}:
    post:
      tags:
      - "upload"
      summary: "Upload TLS files"
      description: "Use this environment(endpoint) to upload TLS files.\n**Access\
        \ policy**: administrator"
      operationId: "UploadTLS"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "certificate"
        in: "path"
        description: "TLS file type. Valid values are 'ca', 'cert' or 'key'."
        required: true
        type: "string"
        enum:
        - "ca"
        - "cert"
        - "key"
        x-exportParamName: "Certificate"
      - name: "folder"
        in: "formData"
        description: "Folder where the TLS file will be stored. Will be created if\
          \ not existing"
        required: true
        type: "string"
        x-exportParamName: "Folder"
      - name: "file"
        in: "formData"
        description: "The file to upload"
        required: true
        type: "file"
        x-exportParamName: "File"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "204":
          description: "Success"
        "400":
          description: "Invalid request"
        "500":
          description: "Server error"
  /users:
    get:
      tags:
      - "users"
      summary: "List users"
      description: "List Portainer users.\nNon-administrator users will only be able\
        \ to list other non-administrator user accounts.\nUser passwords are filtered\
        \ out, and should never be accessible.\n**Access policy**: restricted"
      operationId: "UserList"
      produces:
      - "application/json"
      parameters:
      - name: "environmentId"
        in: "query"
        description: "Identifier of the environment(endpoint) that will be used to\
          \ filter the authorized users"
        required: false
        type: "integer"
        x-exportParamName: "EnvironmentId"
        x-optionalDataType: "Int32"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/portainer.User"
        "400":
          description: "Invalid request"
        "500":
          description: "Server error"
    post:
      tags:
      - "users"
      summary: "Create a new user"
      description: "Create a new Portainer user.\nOnly administrators can create users.\n\
        **Access policy**: restricted"
      operationId: "UserCreate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User details"
        required: true
        schema:
          $ref: "#/definitions/users.userCreatePayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.User"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied"
        "409":
          description: "User already exists"
        "500":
          description: "Server error"
  /users/{id}:
    get:
      tags:
      - "users"
      summary: "Inspect a user"
      description: "Retrieve details about a user.\nUser passwords are filtered out,\
        \ and should never be accessible.\n**Access policy**: authenticated"
      operationId: "UserInspect"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "User identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.User"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied"
        "404":
          description: "User not found"
        "500":
          description: "Server error"
    put:
      tags:
      - "users"
      summary: "Update a user"
      description: "Update user details. A regular user account can only update his\
        \ details.\n**Access policy**: authenticated"
      operationId: "UserUpdate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "User identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        description: "User details"
        required: true
        schema:
          $ref: "#/definitions/users.userUpdatePayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.User"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied"
        "404":
          description: "User not found"
        "409":
          description: "Username already exist"
        "500":
          description: "Server error"
    delete:
      tags:
      - "users"
      summary: "Remove a user"
      description: "Remove a user.\n**Access policy**: administrator"
      operationId: "UserDelete"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "User identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "204":
          description: "Success"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied"
        "404":
          description: "User not found"
        "500":
          description: "Server error"
  /users/{id}/memberships:
    get:
      tags:
      - "users"
      summary: "Inspect a user memberships"
      description: "Inspect a user memberships.\n**Access policy**: restricted"
      operationId: "UserMembershipsInspect"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "User identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.TeamMembership"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied"
        "500":
          description: "Server error"
  /users/{id}/passwd:
    put:
      tags:
      - "users"
      summary: "Update password for a user"
      description: "Update password for the specified user.\n**Access policy**: authenticated"
      operationId: "UserUpdatePassword"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        description: "details"
        required: true
        schema:
          $ref: "#/definitions/users.userUpdatePasswordPayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "204":
          description: "Success"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied"
        "404":
          description: "User not found"
        "500":
          description: "Server error"
  /users/{id}/tokens:
    get:
      tags:
      - "users"
      summary: "Get all API keys for a user"
      description: "Gets all API keys for a user.\nOnly the calling user or admin\
        \ can retrieve api-keys.\n**Access policy**: authenticated"
      operationId: "UserGetAPIKeys"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "User identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/portainer.APIKey"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied"
        "404":
          description: "User not found"
        "500":
          description: "Server error"
    post:
      tags:
      - "users"
      summary: "Generate an API key for a user"
      description: "Generates an API key for a user.\nOnly the calling user can generate\
        \ a token for themselves.\n**Access policy**: restricted"
      operationId: "UserGenerateAPIKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "User identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        description: "details"
        required: true
        schema:
          $ref: "#/definitions/users.userAccessTokenCreatePayload"
        x-exportParamName: "Body"
      security:
      - jwt: []
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/users.accessTokenResponse"
        "400":
          description: "Invalid request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Permission denied"
        "404":
          description: "User not found"
        "500":
          description: "Server error"
  /users/{id}/tokens/{keyID}:
    delete:
      tags:
      - "users"
      summary: "Remove an api-key associated to a user"
      description: "Remove an api-key associated to a user..\nOnly the calling user\
        \ or admin can remove api-key.\n**Access policy**: authenticated"
      operationId: "UserRemoveAPIKey"
      parameters:
      - name: "id"
        in: "path"
        description: "User identifier"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - name: "keyID"
        in: "path"
        description: "Api Key identifier"
        required: true
        type: "integer"
        x-exportParamName: "KeyID"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "204":
          description: "Success"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied"
        "404":
          description: "Not found"
        "500":
          description: "Server error"
  /users/admin/check:
    get:
      tags:
      - "users"
      summary: "Check administrator account existence"
      description: "Check if an administrator account exists in the database.\n**Access\
        \ policy**: public"
      operationId: "UserAdminCheck"
      parameters: []
      responses:
        "204":
          description: "Success"
        "404":
          description: "User not found"
  /users/admin/init:
    post:
      tags:
      - "users"
      summary: "Initialize administrator account"
      description: "Initialize the 'admin' user account.\n**Access policy**: public"
      operationId: "UserAdminInit"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User details"
        required: true
        schema:
          $ref: "#/definitions/users.adminInitPayload"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/portainer.User"
        "400":
          description: "Invalid request"
        "409":
          description: "Admin user already initialized"
        "500":
          description: "Server error"
  /webhooks:
    get:
      tags:
      - "webhooks"
      summary: "List webhooks"
      description: "**Access policy**: authenticated"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "EndpointID"
        in: "query"
        required: false
        type: "integer"
        x-exportParamName: "EndpointID"
        x-optionalDataType: "Int32"
      - name: "ResourceID"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ResourceID"
        x-optionalDataType: "String"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/portainer.Webhook"
        "400":
          description: ""
        "500":
          description: ""
    post:
      tags:
      - "webhooks"
      summary: "Create a webhook"
      description: "**Access policy**: authenticated"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Webhook data"
        required: true
        schema:
          $ref: "#/definitions/webhooks.webhookCreatePayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/portainer.Webhook"
        "400":
          description: ""
        "409":
          description: ""
        "500":
          description: ""
  /webhooks/{id}:
    put:
      tags:
      - "webhooks"
      summary: "Update a webhook"
      description: "**Access policy**: authenticated"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Webhook data"
        required: true
        schema:
          $ref: "#/definitions/webhooks.webhookUpdatePayload"
        x-exportParamName: "Body"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/portainer.Webhook"
        "400":
          description: ""
        "409":
          description: ""
        "500":
          description: ""
    delete:
      tags:
      - "webhooks"
      summary: "Delete a webhook"
      description: "**Access policy**: authenticated"
      parameters:
      - name: "id"
        in: "path"
        description: "Webhook id"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "202":
          description: "Webhook deleted"
        "400":
          description: ""
        "500":
          description: ""
  /webhooks/{token}:
    post:
      tags:
      - "webhooks"
      summary: "Execute a webhook"
      description: "Acts on a passed in token UUID to restart the docker service\n\
        **Access policy**: public"
      parameters:
      - name: "token"
        in: "path"
        description: "Webhook token"
        required: true
        type: "string"
        x-exportParamName: "Token"
      responses:
        "202":
          description: "Webhook executed"
        "400":
          description: ""
        "500":
          description: ""
  /websocket/attach:
    get:
      tags:
      - "websocket"
      summary: "Attach a websocket"
      description: "If the nodeName query parameter is present, the request will be\
        \ proxied to the underlying agent environment(endpoint).\nIf the nodeName\
        \ query parameter is not specified, the request will be upgraded to the websocket\
        \ protocol and\nan AttachStart operation HTTP request will be created and\
        \ hijacked.\n**Access policy**: authenticated"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "endpointId"
        in: "query"
        description: "environment(endpoint) ID of the environment(endpoint) where\
          \ the resource is located"
        required: true
        type: "integer"
        x-exportParamName: "EndpointId"
      - name: "nodeName"
        in: "query"
        description: "node name"
        required: false
        type: "string"
        x-exportParamName: "NodeName"
        x-optionalDataType: "String"
      - name: "token"
        in: "query"
        description: "JWT token used for authentication against this environment(endpoint)"
        required: true
        type: "string"
        x-exportParamName: "Token"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: ""
        "400":
          description: ""
        "403":
          description: ""
        "404":
          description: ""
        "500":
          description: ""
  /websocket/exec:
    get:
      tags:
      - "websocket"
      summary: "Execute a websocket"
      description: "If the nodeName query parameter is present, the request will be\
        \ proxied to the underlying agent environment(endpoint).\nIf the nodeName\
        \ query parameter is not specified, the request will be upgraded to the websocket\
        \ protocol and\nan ExecStart operation HTTP request will be created and hijacked."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "endpointId"
        in: "query"
        description: "environment(endpoint) ID of the environment(endpoint) where\
          \ the resource is located"
        required: true
        type: "integer"
        x-exportParamName: "EndpointId"
      - name: "nodeName"
        in: "query"
        description: "node name"
        required: false
        type: "string"
        x-exportParamName: "NodeName"
        x-optionalDataType: "String"
      - name: "token"
        in: "query"
        description: "JWT token used for authentication against this environment(endpoint)"
        required: true
        type: "string"
        x-exportParamName: "Token"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: ""
        "400":
          description: ""
        "409":
          description: ""
        "500":
          description: ""
  /websocket/kubernetes-shell:
    get:
      tags:
      - "websocket"
      summary: "Execute a websocket on kubectl shell pod"
      description: "The request will be upgraded to the websocket protocol. The request\
        \ will proxy input from the client to the pod via long-lived websocket connection.\n\
        **Access policy**: authenticated"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "endpointId"
        in: "query"
        description: "environment(endpoint) ID of the environment(endpoint) where\
          \ the resource is located"
        required: true
        type: "integer"
        x-exportParamName: "EndpointId"
      - name: "token"
        in: "query"
        description: "JWT token used for authentication against this environment(endpoint)"
        required: true
        type: "string"
        x-exportParamName: "Token"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: "Success"
        "400":
          description: "Invalid request"
        "403":
          description: "Permission denied"
        "500":
          description: "Server error"
  /websocket/pod:
    get:
      tags:
      - "websocket"
      summary: "Execute a websocket on pod"
      description: "The request will be upgraded to the websocket protocol.\n**Access\
        \ policy**: authenticated"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "endpointId"
        in: "query"
        description: "environment(endpoint) ID of the environment(endpoint) where\
          \ the resource is located"
        required: true
        type: "integer"
        x-exportParamName: "EndpointId"
      - name: "namespace"
        in: "query"
        description: "namespace where the container is located"
        required: true
        type: "string"
        x-exportParamName: "Namespace"
      - name: "podName"
        in: "query"
        description: "name of the pod containing the container"
        required: true
        type: "string"
        x-exportParamName: "PodName"
      - name: "containerName"
        in: "query"
        description: "name of the container"
        required: true
        type: "string"
        x-exportParamName: "ContainerName"
      - name: "command"
        in: "query"
        description: "command to execute in the container"
        required: true
        type: "string"
        x-exportParamName: "Command"
      - name: "token"
        in: "query"
        description: "JWT token used for authentication against this environment(endpoint)"
        required: true
        type: "string"
        x-exportParamName: "Token"
      security:
      - ApiKeyAuth: []
      - jwt: []
      responses:
        "200":
          description: ""
        "400":
          description: ""
        "403":
          description: ""
        "404":
          description: ""
        "500":
          description: ""
securityDefinitions:
  ApiKeyAuth:
    type: "apiKey"
    name: "Authorization"
    in: "header"
  jwt:
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  auth.authenticatePayload:
    type: "object"
    required:
    - "password"
    - "username"
    properties:
      password:
        type: "string"
        example: "mypassword"
        description: "Password"
      username:
        type: "string"
        example: "admin"
        description: "Username"
  auth.authenticateResponse:
    type: "object"
    properties:
      jwt:
        type: "string"
        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE"
        description: "JWT token used to authenticate against the API"
    example:
      jwt: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE"
  auth.oauthPayload:
    type: "object"
    properties:
      code:
        type: "string"
        description: "OAuth code returned from OAuth Provided"
  backup.backupPayload:
    type: "object"
    properties:
      password:
        type: "string"
  backup.restorePayload:
    type: "object"
    properties:
      fileContent:
        type: "array"
        items:
          type: "integer"
      fileName:
        type: "string"
      password:
        type: "string"
  containers.containerGpusResponse:
    type: "object"
    properties:
      gpus:
        type: "string"
    example:
      gpus: "gpus"
  customtemplates.customTemplateFromFileContentPayload:
    type: "object"
    required:
    - "description"
    - "fileContent"
    - "title"
    - "type"
    properties:
      description:
        type: "string"
        example: "High performance web server"
        description: "Description of the template"
      fileContent:
        type: "string"
        description: "Content of stack file"
      logo:
        type: "string"
        example: "https://cloudinovasi.id/assets/img/logos/nginx.png"
        description: "URL of the template's logo"
      note:
        type: "string"
        example: "This is my <b>custom</b> template"
        description: "A note that will be displayed in the UI. Supports HTML content"
      platform:
        type: "integer"
        example: 1
        description: "Platform associated to the template.\nValid values are: 1 -\
          \ 'linux', 2 - 'windows'\nRequired for Docker stacks"
      title:
        type: "string"
        example: "Nginx"
        description: "Title of the template"
      type:
        type: "integer"
        example: 1
        description: "Type of created stack (1 - swarm, 2 - compose, 3 - kubernetes)"
      variables:
        type: "array"
        description: "Definitions of variables in the stack file"
        items:
          $ref: "#/definitions/portainer.CustomTemplateVariableDefinition"
  customtemplates.customTemplateFromGitRepositoryPayload:
    type: "object"
    required:
    - "description"
    - "repositoryURL"
    - "title"
    - "type"
    properties:
      composeFilePathInRepository:
        type: "string"
        example: "docker-compose.yml"
        description: "Path to the Stack file inside the Git repository"
        default: "docker-compose.yml"
      description:
        type: "string"
        example: "High performance web server"
        description: "Description of the template"
      logo:
        type: "string"
        example: "https://cloudinovasi.id/assets/img/logos/nginx.png"
        description: "URL of the template's logo"
      note:
        type: "string"
        example: "This is my <b>custom</b> template"
        description: "A note that will be displayed in the UI. Supports HTML content"
      platform:
        type: "integer"
        example: 1
        description: "Platform associated to the template.\nValid values are: 1 -\
          \ 'linux', 2 - 'windows'\nRequired for Docker stacks"
      repositoryAuthentication:
        type: "boolean"
        example: true
        description: "Use basic authentication to clone the Git repository"
      repositoryPassword:
        type: "string"
        example: "myGitPassword"
        description: "Password used in basic authentication. Required when RepositoryAuthentication\
          \ is true."
      repositoryReferenceName:
        type: "string"
        example: "refs/heads/master"
        description: "Reference name of a Git repository hosting the Stack file"
      repositoryURL:
        type: "string"
        example: "https://github.com/openfaas/faas"
        description: "URL of a Git repository hosting the Stack file"
      repositoryUsername:
        type: "string"
        example: "myGitUsername"
        description: "Username used in basic authentication. Required when RepositoryAuthentication\
          \ is true."
      title:
        type: "string"
        example: "Nginx"
        description: "Title of the template"
      type:
        type: "integer"
        example: 1
        description: "Type of created stack (1 - swarm, 2 - compose)"
      variables:
        type: "array"
        description: "Definitions of variables in the stack file"
        items:
          $ref: "#/definitions/portainer.CustomTemplateVariableDefinition"
  customtemplates.customTemplateUpdatePayload:
    type: "object"
    required:
    - "description"
    - "fileContent"
    - "title"
    - "type"
    properties:
      description:
        type: "string"
        example: "High performance web server"
        description: "Description of the template"
      fileContent:
        type: "string"
        description: "Content of stack file"
      logo:
        type: "string"
        example: "https://cloudinovasi.id/assets/img/logos/nginx.png"
        description: "URL of the template's logo"
      note:
        type: "string"
        example: "This is my <b>custom</b> template"
        description: "A note that will be displayed in the UI. Supports HTML content"
      platform:
        type: "integer"
        example: 1
        description: "Platform associated to the template.\nValid values are: 1 -\
          \ 'linux', 2 - 'windows'\nRequired for Docker stacks"
      title:
        type: "string"
        example: "Nginx"
        description: "Title of the template"
      type:
        type: "integer"
        example: 1
        description: "Type of created stack (1 - swarm, 2 - compose, 3 - kubernetes)"
      variables:
        type: "array"
        description: "Definitions of variables in the stack file"
        items:
          $ref: "#/definitions/portainer.CustomTemplateVariableDefinition"
  customtemplates.fileResponse:
    type: "object"
    properties:
      fileContent:
        type: "string"
    example:
      fileContent: "fileContent"
  demo.EnvironmentDetails:
    type: "object"
    properties:
      enabled:
        type: "boolean"
      environments:
        type: "array"
        items:
          type: "integer"
      users:
        type: "array"
        items:
          type: "integer"
          example: 1
    example:
      environments:
      - 0
      - 0
      enabled: true
      users:
      - 1
      - 1
  edgegroups.decoratedEdgeGroup:
    type: "object"
    properties:
      Dynamic:
        type: "boolean"
      Endpoints:
        type: "array"
        items:
          type: "integer"
      HasEdgeGroup:
        type: "boolean"
      HasEdgeStack:
        type: "boolean"
      Id:
        type: "integer"
        example: 1
        description: "EdgeGroup Identifier"
      Name:
        type: "string"
      PartialMatch:
        type: "boolean"
      TagIds:
        type: "array"
        items:
          type: "integer"
          example: 1
          description: "Tag identifier"
      endpointTypes:
        type: "array"
        items:
          type: "integer"
          example: 1
          description: "Environment(Endpoint) environment(endpoint) type. 1 for a\
            \ Docker environment(endpoint), 2 for an agent on Docker environment(endpoint)\
            \ or 3 for an Azure environment(endpoint)."
    example:
      Endpoints:
      - 0
      - 0
      Dynamic: true
      TagIds:
      - 1
      - 1
      HasEdgeGroup: true
      PartialMatch: true
      HasEdgeStack: true
      endpointTypes:
      - 1
      - 1
      Id: 1
      Name: "Name"
  edgegroups.edgeGroupCreatePayload:
    type: "object"
    properties:
      dynamic:
        type: "boolean"
      endpoints:
        type: "array"
        items:
          type: "integer"
      name:
        type: "string"
      partialMatch:
        type: "boolean"
      tagIDs:
        type: "array"
        items:
          type: "integer"
          example: 1
          description: "Tag identifier"
  edgegroups.edgeGroupUpdatePayload:
    type: "object"
    properties:
      dynamic:
        type: "boolean"
      endpoints:
        type: "array"
        items:
          type: "integer"
      name:
        type: "string"
      partialMatch:
        type: "boolean"
      tagIDs:
        type: "array"
        items:
          type: "integer"
          example: 1
          description: "Tag identifier"
  edgejobs.edgeJobCreateFromFileContentPayload:
    type: "object"
    properties:
      cronExpression:
        type: "string"
      edgeGroups:
        type: "array"
        items:
          type: "integer"
          example: 1
          description: "EdgeGroup Identifier"
      endpoints:
        type: "array"
        items:
          type: "integer"
      fileContent:
        type: "string"
      name:
        type: "string"
      recurring:
        type: "boolean"
  edgejobs.edgeJobCreateFromFilePayload:
    type: "object"
    properties:
      cronExpression:
        type: "string"
      edgeGroups:
        type: "array"
        items:
          type: "integer"
          example: 1
          description: "EdgeGroup Identifier"
      endpoints:
        type: "array"
        items:
          type: "integer"
      file:
        type: "array"
        items:
          type: "integer"
      name:
        type: "string"
      recurring:
        type: "boolean"
  edgejobs.edgeJobFileResponse:
    type: "object"
    properties:
      FileContent:
        type: "string"
    example:
      FileContent: "FileContent"
  edgejobs.edgeJobUpdatePayload:
    type: "object"
    properties:
      cronExpression:
        type: "string"
      edgeGroups:
        type: "array"
        items:
          type: "integer"
          example: 1
          description: "EdgeGroup Identifier"
      endpoints:
        type: "array"
        items:
          type: "integer"
      fileContent:
        type: "string"
      name:
        type: "string"
      recurring:
        type: "boolean"
  edgejobs.fileResponse:
    type: "object"
    properties:
      FileContent:
        type: "string"
    example:
      FileContent: "FileContent"
  edgejobs.taskContainer:
    type: "object"
    properties:
      EndpointId:
        type: "integer"
      Id:
        type: "string"
      LogsStatus:
        type: "integer"
    example:
      LogsStatus: 6
      EndpointId: 0
      Id: "Id"
  edgestacks.stackFileResponse:
    type: "object"
    properties:
      StackFileContent:
        type: "string"
    example:
      StackFileContent: "StackFileContent"
  edgestacks.swarmStackFromFileContentPayload:
    type: "object"
    required:
    - "name"
    - "stackFileContent"
    properties:
      deploymentType:
        type: "integer"
        example: 0
        description: "Deployment type to deploy this stack\nValid values are: 0 -\
          \ 'compose', 1 - 'kubernetes', 2 - 'nomad'\nfor compose stacks will use\
          \ kompose to convert to kubernetes manifest for kubernetes environments(endpoints)\n\
          kubernetes deploy type is enabled only for kubernetes environments(endpoints)\n\
          nomad deploy type is enabled only for nomad environments(endpoints)"
      edgeGroups:
        type: "array"
        example:
        - 1
        description: "List of identifiers of EdgeGroups"
        items:
          type: "integer"
          example: 1
          description: "EdgeGroup Identifier"
      name:
        type: "string"
        example: "myStack"
        description: "Name of the stack"
      registries:
        type: "array"
        description: "List of Registries to use for this stack"
        items:
          type: "integer"
      stackFileContent:
        type: "string"
        example: "version: 3\n services:\n web:\n image:nginx"
        description: "Content of the Stack file"
      useManifestNamespaces:
        type: "boolean"
        description: "Uses the manifest's namespaces instead of the default one"
  edgestacks.swarmStackFromFileUploadPayload:
    type: "object"
    properties:
      deploymentType:
        type: "integer"
        example: 0
        description: "Deployment type to deploy this stack\nValid values are: 0 -\
          \ 'compose', 1 - 'kubernetes', 2 - 'nomad'\nfor compose stacks will use\
          \ kompose to convert to kubernetes manifest for kubernetes environments(endpoints)\n\
          kubernetes deploytype is enabled only for kubernetes environments(endpoints)\n\
          nomad deploytype is enabled only for nomad environments(endpoints)"
      edgeGroups:
        type: "array"
        items:
          type: "integer"
          example: 1
          description: "EdgeGroup Identifier"
      name:
        type: "string"
      registries:
        type: "array"
        items:
          type: "integer"
      stackFileContent:
        type: "array"
        items:
          type: "integer"
      useManifestNamespaces:
        type: "boolean"
        description: "Uses the manifest's namespaces instead of the default one"
  edgestacks.swarmStackFromGitRepositoryPayload:
    type: "object"
    required:
    - "name"
    - "repositoryURL"
    properties:
      deploymentType:
        type: "integer"
        example: 0
        description: "Deployment type to deploy this stack\nValid values are: 0 -\
          \ 'compose', 1 - 'kubernetes', 2 - 'nomad'\nfor compose stacks will use\
          \ kompose to convert to kubernetes manifest for kubernetes environments(endpoints)\n\
          kubernetes deploy type is enabled only for kubernetes environments(endpoints)\n\
          nomad deploy type is enabled only for nomad environments(endpoints)"
      edgeGroups:
        type: "array"
        example:
        - 1
        description: "List of identifiers of EdgeGroups"
        items:
          type: "integer"
          example: 1
          description: "EdgeGroup Identifier"
      filePathInRepository:
        type: "string"
        example: "docker-compose.yml"
        description: "Path to the Stack file inside the Git repository"
        default: "docker-compose.yml"
      name:
        type: "string"
        example: "myStack"
        description: "Name of the stack"
      registries:
        type: "array"
        description: "List of Registries to use for this stack"
        items:
          type: "integer"
      repositoryAuthentication:
        type: "boolean"
        example: true
        description: "Use basic authentication to clone the Git repository"
      repositoryPassword:
        type: "string"
        example: "myGitPassword"
        description: "Password used in basic authentication. Required when RepositoryAuthentication\
          \ is true."
      repositoryReferenceName:
        type: "string"
        example: "refs/heads/master"
        description: "Reference name of a Git repository hosting the Stack file"
      repositoryURL:
        type: "string"
        example: "https://github.com/openfaas/faas"
        description: "URL of a Git repository hosting the Stack file"
      repositoryUsername:
        type: "string"
        example: "myGitUsername"
        description: "Username used in basic authentication. Required when RepositoryAuthentication\
          \ is true."
      useManifestNamespaces:
        type: "boolean"
        description: "Uses the manifest's namespaces instead of the default one"
  edgestacks.updateEdgeStackPayload:
    type: "object"
    properties:
      deploymentType:
        type: "integer"
        example: 0
        description: "Deployment type to deploy this stack\nValid values are: 0 -\
          \ 'compose', 1 - 'kubernetes', 2 - 'nomad'\nfor compose stacks will use\
          \ kompose to convert to kubernetes manifest for kubernetes environments(endpoints)\n\
          kubernetes deploy type is enabled only for kubernetes environments(endpoints)\n\
          nomad deploy type is enabled only for nomad environments(endpoints)"
      edgeGroups:
        type: "array"
        items:
          type: "integer"
          example: 1
          description: "EdgeGroup Identifier"
      stackFileContent:
        type: "string"
      useManifestNamespaces:
        type: "boolean"
        description: "Uses the manifest's namespaces instead of the default one"
      version:
        type: "integer"
  endpointedge.configResponse:
    type: "object"
    properties:
      name:
        type: "string"
      namespace:
        type: "string"
        description: "Namespace to use for Kubernetes manifests, leave empty to use\
          \ the namespaces defined in the manifest"
      stackFileContent:
        type: "string"
    example:
      stackFileContent: "stackFileContent"
      name: "name"
      namespace: "namespace"
  endpointedge.edgeJobResponse:
    type: "object"
    properties:
      CollectLogs:
        type: "boolean"
        example: true
        description: "Whether to collect logs"
      CronExpression:
        type: "string"
        example: "* * * * *"
        description: "A cron expression to schedule this job"
      Id:
        type: "integer"
        example: 2
        description: "EdgeJob Identifier"
      Script:
        type: "string"
        example: "echo hello"
        description: "Script to run"
      Version:
        type: "integer"
        example: 2
        description: "Version of this EdgeJob"
    example:
      Script: "echo hello"
      CollectLogs: true
      Version: 2
      CronExpression: "* * * * *"
      Id: 2
  endpointedge.endpointEdgeStatusInspectResponse:
    type: "object"
    properties:
      checkin:
        type: "integer"
        example: 5
        description: "The current value of CheckinInterval"
      credentials:
        type: "string"
      port:
        type: "integer"
        example: 8732
        description: "The tunnel port"
      schedules:
        type: "array"
        description: "List of requests for jobs to run on the environment(endpoint)"
        items:
          $ref: "#/definitions/endpointedge.edgeJobResponse"
      stacks:
        type: "array"
        description: "List of stacks to be deployed on the environments(endpoints)"
        items:
          $ref: "#/definitions/endpointedge.stackStatusResponse"
      status:
        type: "string"
        example: "REQUIRED"
        description: "Status represents the environment(endpoint) status"
    example:
      checkin: 5
      credentials: "credentials"
      port: 8732
      stacks:
      - id: 1
        version: 3
      - id: 1
        version: 3
      schedules:
      - Script: "echo hello"
        CollectLogs: true
        Version: 2
        CronExpression: "* * * * *"
        Id: 2
      - Script: "echo hello"
        CollectLogs: true
        Version: 2
        CronExpression: "* * * * *"
        Id: 2
      status: "REQUIRED"
  endpointedge.stackStatusResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
        description: "EdgeStack Identifier"
      version:
        type: "integer"
        example: 3
        description: "Version of this stack"
    example:
      id: 1
      version: 3
  endpointgroups.endpointGroupCreatePayload:
    type: "object"
    required:
    - "name"
    properties:
      associatedEndpoints:
        type: "array"
        example:
        - 1
        - 3
        description: "List of environment(endpoint) identifiers that will be part\
          \ of this group"
        items:
          type: "integer"
      description:
        type: "string"
        example: "description"
        description: "Environment(Endpoint) group description"
      name:
        type: "string"
        example: "my-environment-group"
        description: "Environment(Endpoint) group name"
      tagIDs:
        type: "array"
        example:
        - 1
        - 2
        description: "List of tag identifiers to which this environment(endpoint)\
          \ group is associated"
        items:
          type: "integer"
          example: 1
          description: "Tag identifier"
  endpointgroups.endpointGroupUpdatePayload:
    type: "object"
    properties:
      description:
        type: "string"
        example: "description"
        description: "Environment(Endpoint) group description"
      name:
        type: "string"
        example: "my-environment-group"
        description: "Environment(Endpoint) group name"
      tagIDs:
        type: "array"
        example:
        - 3
        - 4
        description: "List of tag identifiers associated to the environment(endpoint)\
          \ group"
        items:
          type: "integer"
          example: 1
          description: "Tag identifier"
      teamAccessPolicies:
        $ref: "#/definitions/portainer.TeamAccessPolicies"
      userAccessPolicies:
        $ref: "#/definitions/portainer.UserAccessPolicies"
  endpoints.dockerhubStatusResponse:
    type: "object"
    properties:
      limit:
        type: "integer"
        description: "Daily limit"
      remaining:
        type: "integer"
        description: "Remaiming images to pull"
    example:
      limit: 0
      remaining: 6
  endpoints.endpointCreateGlobalKeyResponse:
    type: "object"
    properties:
      endpointID:
        type: "integer"
    example:
      endpointID: 0
  endpoints.endpointSettingsUpdatePayload:
    type: "object"
    properties:
      allowBindMountsForRegularUsers:
        type: "boolean"
        example: false
        description: "Whether non-administrator should be able to use bind mounts\
          \ when creating containers"
      allowContainerCapabilitiesForRegularUsers:
        type: "boolean"
        example: true
        description: "Whether non-administrator should be able to use container capabilities"
      allowDeviceMappingForRegularUsers:
        type: "boolean"
        example: true
        description: "Whether non-administrator should be able to use device mapping"
      allowHostNamespaceForRegularUsers:
        type: "boolean"
        example: true
        description: "Whether non-administrator should be able to use the host pid"
      allowPrivilegedModeForRegularUsers:
        type: "boolean"
        example: false
        description: "Whether non-administrator should be able to use privileged mode\
          \ when creating containers"
      allowStackManagementForRegularUsers:
        type: "boolean"
        example: true
        description: "Whether non-administrator should be able to manage stacks"
      allowSysctlSettingForRegularUsers:
        type: "boolean"
        example: true
        description: "Whether non-administrator should be able to use sysctl settings"
      allowVolumeBrowserForRegularUsers:
        type: "boolean"
        example: true
        description: "Whether non-administrator should be able to browse volumes"
      enableHostManagementFeatures:
        type: "boolean"
        example: true
        description: "Whether host management features are enabled"
  endpoints.endpointUpdatePayload:
    type: "object"
    properties:
      azureApplicationID:
        type: "string"
        example: "eag7cdo9-o09l-9i83-9dO9-f0b23oe78db4"
        description: "Azure application ID"
      azureAuthenticationKey:
        type: "string"
        example: "cOrXoK/1D35w8YQ8nH1/8ZGwzz45JIYD5jxHKXEQknk="
        description: "Azure authentication key"
      azureTenantID:
        type: "string"
        example: "34ddc78d-4fel-2358-8cc1-df84c8o839f5"
        description: "Azure tenant ID"
      edgeCheckinInterval:
        type: "integer"
        example: 5
        description: "The check in interval for edge agent (in seconds)"
      gpus:
        type: "array"
        description: "GPUs information"
        items:
          $ref: "#/definitions/portainer.Pair"
      groupID:
        type: "integer"
        example: 1
        description: "Group identifier"
      kubernetes:
        description: "Associated Kubernetes data"
        $ref: "#/definitions/portainer.KubernetesData"
      name:
        type: "string"
        example: "my-environment"
        description: "Name that will be used to identify this environment(endpoint)"
      publicURL:
        type: "string"
        example: "docker.mydomain.tld:2375"
        description: "URL or IP address where exposed containers will be reachable.\\\
          \nDefaults to URL if not specified"
      status:
        type: "integer"
        example: 1
        description: "The status of the environment(endpoint) (1 - up, 2 - down)"
      tagIDs:
        type: "array"
        example:
        - 1
        - 2
        description: "List of tag identifiers to which this environment(endpoint)\
          \ is associated"
        items:
          type: "integer"
          example: 1
          description: "Tag identifier"
      teamAccessPolicies:
        $ref: "#/definitions/portainer.TeamAccessPolicies"
      tls:
        type: "boolean"
        example: true
        description: "Require TLS to connect against this environment(endpoint)"
      tlsskipClientVerify:
        type: "boolean"
        example: false
        description: "Skip client verification when using TLS"
      tlsskipVerify:
        type: "boolean"
        example: false
        description: "Skip server verification when using TLS"
      url:
        type: "string"
        example: "docker.mydomain.tld:2375"
        description: "URL or IP address of a Docker host"
      userAccessPolicies:
        $ref: "#/definitions/portainer.UserAccessPolicies"
  endpoints.registryAccessPayload:
    type: "object"
    properties:
      namespaces:
        type: "array"
        items:
          type: "string"
      teamAccessPolicies:
        $ref: "#/definitions/portainer.TeamAccessPolicies"
      userAccessPolicies:
        $ref: "#/definitions/portainer.UserAccessPolicies"
  fdo.deviceConfigurePayload:
    type: "object"
    properties:
      edgeID:
        type: "string"
      edgeKey:
        type: "string"
      name:
        type: "string"
      profile:
        type: "integer"
  fdo.fdoConfigurePayload:
    type: "object"
    properties:
      enabled:
        type: "boolean"
      ownerPassword:
        type: "string"
      ownerURL:
        type: "string"
      ownerUsername:
        type: "string"
  gittypes.GitAuthentication:
    type: "object"
    properties:
      gitCredentialID:
        type: "integer"
        example: 0
        description: "Git credentials identifier when the value is not 0\nWhen the\
          \ value is 0, Username and Password are set without using saved credential\n\
          This is introduced since 2.15.0"
      password:
        type: "string"
      username:
        type: "string"
    example:
      gitCredentialID: 0
      password: "password"
      username: "username"
  gittypes.RepoConfig:
    type: "object"
    properties:
      authentication:
        description: "Git credentials"
        $ref: "#/definitions/gittypes.GitAuthentication"
      configFilePath:
        type: "string"
        example: "docker-compose.yml"
        description: "Path to where the config file is in this url/refName"
      configHash:
        type: "string"
        example: "bc4c183d756879ea4d173315338110b31004b8e0"
        description: "Repository hash"
      referenceName:
        type: "string"
        example: "refs/heads/branch_name"
        description: "The reference name"
      url:
        type: "string"
        example: "https://github.com/portainer/portainer.git"
        description: "The repo url"
    example:
      configFilePath: "docker-compose.yml"
      configHash: "bc4c183d756879ea4d173315338110b31004b8e0"
      url: "https://github.com/portainer/portainer.git"
      authentication:
        gitCredentialID: 0
        password: "password"
        username: "username"
      referenceName: "refs/heads/branch_name"
  helm.addHelmRepoUrlPayload:
    type: "object"
    properties:
      url:
        type: "string"
  helm.helmUserRepositoryResponse:
    type: "object"
    properties:
      GlobalRepository:
        type: "string"
      UserRepositories:
        type: "array"
        items:
          $ref: "#/definitions/portainer.HelmUserRepository"
    example:
      GlobalRepository: "GlobalRepository"
      UserRepositories:
      - UserId: 1
        Id: 1
        URL: "https://charts.bitnami.com/bitnami"
      - UserId: 1
        Id: 1
        URL: "https://charts.bitnami.com/bitnami"
  helm.installChartPayload:
    type: "object"
    properties:
      chart:
        type: "string"
      name:
        type: "string"
      namespace:
        type: "string"
      repo:
        type: "string"
      values:
        type: "string"
  kubernetes.namespacesToggleSystemPayload:
    type: "object"
    properties:
      system:
        type: "boolean"
        example: true
        description: "Toggle the system state of this namespace to true or false"
  ldap.checkPayload:
    type: "object"
    properties:
      ldapsettings:
        $ref: "#/definitions/portainer.LDAPSettings"
  motd.motdResponse:
    type: "object"
    properties:
      ContentLayout:
        type: "object"
        additionalProperties:
          type: "string"
      Hash:
        type: "array"
        items:
          type: "integer"
      Message:
        type: "string"
      Style:
        type: "string"
      Title:
        type: "string"
    example:
      ContentLayout:
        key: "ContentLayout"
      Message: "Message"
      Style: "Style"
      Title: "Title"
      Hash:
      - 0
      - 0
  openamt.deviceActionPayload:
    type: "object"
    properties:
      action:
        type: "string"
  openamt.deviceFeaturesPayload:
    type: "object"
    properties:
      features:
        $ref: "#/definitions/portainer.OpenAMTDeviceEnabledFeatures"
  openamt.openAMTConfigurePayload:
    type: "object"
    properties:
      certFileContent:
        type: "string"
      certFileName:
        type: "string"
      certFilePassword:
        type: "string"
      domainName:
        type: "string"
      enabled:
        type: "boolean"
      mpspassword:
        type: "string"
      mpsserver:
        type: "string"
      mpsuser:
        type: "string"
  portainer.APIKey:
    type: "object"
    properties:
      dateCreated:
        type: "integer"
        description: "Unix timestamp (UTC) when the API key was created"
      description:
        type: "string"
        example: "portainer-api-key"
      digest:
        type: "array"
        description: "Digest represents SHA256 hash of the raw API key"
        items:
          type: "integer"
      id:
        type: "integer"
        example: 1
      lastUsed:
        type: "integer"
        description: "Unix timestamp (UTC) when the API key was last used"
      prefix:
        type: "string"
        description: "API key identifier (7 char prefix)"
      userId:
        type: "integer"
        example: 1
    example:
      lastUsed: 1
      dateCreated: 0
      prefix: "prefix"
      digest:
      - 6
      - 6
      description: "portainer-api-key"
      id: 1
      userId: 1
  portainer.AccessPolicy:
    type: "object"
    properties:
      RoleId:
        type: "integer"
        example: 1
        description: "Role identifier. Reference the role that will be associated\
          \ to this access policy"
  portainer.Authorizations:
    type: "object"
    additionalProperties:
      type: "boolean"
  portainer.AzureCredentials:
    type: "object"
    properties:
      ApplicationID:
        type: "string"
        example: "eag7cdo9-o09l-9i83-9dO9-f0b23oe78db4"
        description: "Azure application ID"
      AuthenticationKey:
        type: "string"
        example: "cOrXoK/1D35w8YQ8nH1/8ZGwzz45JIYD5jxHKXEQknk="
        description: "Azure authentication key"
      TenantID:
        type: "string"
        example: "34ddc78d-4fel-2358-8cc1-df84c8o839f5"
        description: "Azure tenant ID"
    example:
      TenantID: "34ddc78d-4fel-2358-8cc1-df84c8o839f5"
      AuthenticationKey: "cOrXoK/1D35w8YQ8nH1/8ZGwzz45JIYD5jxHKXEQknk="
      ApplicationID: "eag7cdo9-o09l-9i83-9dO9-f0b23oe78db4"
  portainer.CustomTemplate:
    type: "object"
    properties:
      CreatedByUserId:
        type: "integer"
        example: 3
        description: "User identifier who created this template"
      Description:
        type: "string"
        example: "High performance web server"
        description: "Description of the template"
      EntryPoint:
        type: "string"
        example: "docker-compose.yml"
        description: "Path to the Stack file"
      Id:
        type: "integer"
        example: 1
        description: "CustomTemplate Identifier"
      Logo:
        type: "string"
        example: "https://cloudinovasi.id/assets/img/logos/nginx.png"
        description: "URL of the template's logo"
      Note:
        type: "string"
        example: "This is my <b>custom</b> template"
        description: "A note that will be displayed in the UI. Supports HTML content"
      Platform:
        type: "integer"
        example: 1
        description: "Platform associated to the template.\nValid values are: 1 -\
          \ 'linux', 2 - 'windows'"
      ProjectPath:
        type: "string"
        example: "/data/custom_template/3"
        description: "Path on disk to the repository hosting the Stack file"
      ResourceControl:
        $ref: "#/definitions/portainer.ResourceControl"
      Title:
        type: "string"
        example: "Nginx"
        description: "Title of the template"
      Type:
        type: "integer"
        example: 1
        description: "Type of created stack (1 - swarm, 2 - compose)"
      variables:
        type: "array"
        items:
          $ref: "#/definitions/portainer.CustomTemplateVariableDefinition"
    example:
      CreatedByUserId: 3
      Type: 1
      variables:
      - defaultValue: "default value"
        name: "MY_VAR"
        description: "Description"
        label: "My Variable"
      - defaultValue: "default value"
        name: "MY_VAR"
        description: "Description"
        label: "My Variable"
      Description: "High performance web server"
      Platform: 1
      Note: "This is my <b>custom</b> template"
      EntryPoint: "docker-compose.yml"
      Title: "Nginx"
      Id: 1
      ProjectPath: "/data/custom_template/3"
      ResourceControl:
        SubResourceIds:
        - "617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08"
        Type: 1
        OwnerId: 6
        ResourceId: "617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08"
        UserAccesses:
        - UserId: 2
          AccessLevel: 5
        - UserId: 2
          AccessLevel: 5
        TeamAccesses:
        - TeamId: 5
          AccessLevel: 1
        - TeamId: 5
          AccessLevel: 1
        AdministratorsOnly: true
        Id: 1
        Public: true
        AccessLevel: 0
        System: true
      Logo: "https://cloudinovasi.id/assets/img/logos/nginx.png"
  portainer.CustomTemplateVariableDefinition:
    type: "object"
    properties:
      defaultValue:
        type: "string"
        example: "default value"
      description:
        type: "string"
        example: "Description"
      label:
        type: "string"
        example: "My Variable"
      name:
        type: "string"
        example: "MY_VAR"
    example:
      defaultValue: "default value"
      name: "MY_VAR"
      description: "Description"
      label: "My Variable"
  portainer.DockerSnapshot:
    type: "object"
    properties:
      DockerSnapshotRaw:
        $ref: "#/definitions/portainer.DockerSnapshotRaw"
      DockerVersion:
        type: "string"
      GpuUseAll:
        type: "boolean"
      GpuUseList:
        type: "array"
        items:
          type: "string"
      HealthyContainerCount:
        type: "integer"
      ImageCount:
        type: "integer"
      NodeCount:
        type: "integer"
      RunningContainerCount:
        type: "integer"
      ServiceCount:
        type: "integer"
      StackCount:
        type: "integer"
      StoppedContainerCount:
        type: "integer"
      Swarm:
        type: "boolean"
      Time:
        type: "integer"
      TotalCPU:
        type: "integer"
      TotalMemory:
        type: "integer"
      UnhealthyContainerCount:
        type: "integer"
      VolumeCount:
        type: "integer"
    example:
      GpuUseAll: true
      StackCount: 4
      UnhealthyContainerCount: 6
      GpuUseList:
      - "GpuUseList"
      - "GpuUseList"
      NodeCount: 9
      HealthyContainerCount: 2
      Time: 1
      VolumeCount: 7
      ServiceCount: 2
      DockerSnapshotRaw: {}
      Swarm: true
      ImageCount: 7
      DockerVersion: "DockerVersion"
      TotalCPU: 1
      StoppedContainerCount: 7
      TotalMemory: 1
      RunningContainerCount: 3
  portainer.DockerSnapshotRaw:
    type: "object"
  portainer.EcrData:
    type: "object"
    properties:
      Region:
        type: "string"
        example: "ap-southeast-2"
    example:
      Region: "ap-southeast-2"
  portainer.EdgeGroup:
    type: "object"
    properties:
      Dynamic:
        type: "boolean"
      Endpoints:
        type: "array"
        items:
          type: "integer"
      Id:
        type: "integer"
        example: 1
        description: "EdgeGroup Identifier"
      Name:
        type: "string"
      PartialMatch:
        type: "boolean"
      TagIds:
        type: "array"
        items:
          type: "integer"
          example: 1
          description: "Tag identifier"
    example:
      Endpoints:
      - 0
      - 0
      Dynamic: true
      TagIds:
      - 1
      - 1
      PartialMatch: true
      Id: 1
      Name: "Name"
  portainer.EdgeJob:
    type: "object"
    properties:
      Created:
        type: "integer"
      CronExpression:
        type: "string"
      EdgeGroups:
        type: "array"
        items:
          type: "integer"
          example: 1
          description: "EdgeGroup Identifier"
      Endpoints:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/portainer.EdgeJobEndpointMeta"
      Id:
        type: "integer"
        example: 1
        description: "EdgeJob Identifier"
      Name:
        type: "string"
      Recurring:
        type: "boolean"
      ScriptPath:
        type: "string"
      Version:
        type: "integer"
      groupLogsCollection:
        type: "object"
        description: "Field used for log collection of Endpoints belonging to EdgeGroups"
        additionalProperties:
          $ref: "#/definitions/portainer.EdgeJobEndpointMeta"
    example:
      Endpoints:
        key:
          logsStatus: 6
          collectLogs: true
      ScriptPath: "ScriptPath"
      Recurring: true
      Version: 1
      groupLogsCollection:
        key:
          logsStatus: 6
          collectLogs: true
      EdgeGroups:
      - 1
      - 1
      CronExpression: "CronExpression"
      Id: 1
      Created: 0
      Name: "Name"
  portainer.EdgeJobEndpointMeta:
    type: "object"
    properties:
      collectLogs:
        type: "boolean"
      logsStatus:
        type: "integer"
    example:
      logsStatus: 6
      collectLogs: true
  portainer.EdgeStack:
    type: "object"
    properties:
      CreationDate:
        type: "integer"
      EdgeGroups:
        type: "array"
        items:
          type: "integer"
          example: 1
          description: "EdgeGroup Identifier"
      EntryPoint:
        type: "string"
      Id:
        type: "integer"
        example: 1
        description: "EdgeStack Identifier"
      Name:
        type: "string"
      NumDeployments:
        type: "integer"
      ProjectPath:
        type: "string"
      Prune:
        type: "boolean"
        description: "Deprecated"
      Status:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/portainer.EdgeStackStatus"
      Version:
        type: "integer"
      deploymentType:
        type: "integer"
        example: 0
        description: "Deployment type to deploy this stack\nValid values are: 0 -\
          \ 'compose', 1 - 'kubernetes', 2 - 'nomad'\nfor compose stacks will use\
          \ kompose to convert to kubernetes manifest for kubernetes environments(endpoints)\n\
          kubernetes deploy type is enabled only for kubernetes environments(endpoints)\n\
          nomad deploy type is enabled only for nomad environments(endpoints)"
      manifestPath:
        type: "string"
      useManifestNamespaces:
        type: "boolean"
        description: "Uses the manifest's namespaces instead of the default one"
    example:
      Status:
        key:
          Type: 5
          Details:
            remoteUpdateSuccess: true
            acknowledged: true
            pending: true
            error: true
            ok: true
            remove: true
            imagesPulled: true
          EndpointID: 1
          Error: "Error"
      CreationDate: 0
      EdgeGroups:
      - 1
      - 1
      EntryPoint: "EntryPoint"
      manifestPath: "manifestPath"
      Name: "Name"
      deploymentType: 0
      Version: 5
      Prune: true
      NumDeployments: 6
      Id: 1
      useManifestNamespaces: true
      ProjectPath: "ProjectPath"
  portainer.EdgeStackStatus:
    type: "object"
    properties:
      Details:
        $ref: "#/definitions/portainer.EdgeStackStatusDetails"
      EndpointID:
        type: "integer"
      Error:
        type: "string"
      Type:
        type: "integer"
        description: "Deprecated"
    example:
      Type: 5
      Details:
        remoteUpdateSuccess: true
        acknowledged: true
        pending: true
        error: true
        ok: true
        remove: true
        imagesPulled: true
      EndpointID: 1
      Error: "Error"
  portainer.EdgeStackStatusDetails:
    type: "object"
    properties:
      acknowledged:
        type: "boolean"
      error:
        type: "boolean"
      imagesPulled:
        type: "boolean"
      ok:
        type: "boolean"
      pending:
        type: "boolean"
      remoteUpdateSuccess:
        type: "boolean"
      remove:
        type: "boolean"
    example:
      remoteUpdateSuccess: true
      acknowledged: true
      pending: true
      error: true
      ok: true
      remove: true
      imagesPulled: true
  portainer.Endpoint:
    type: "object"
    properties:
      AMTDeviceGUID:
        type: "string"
        example: "4c4c4544-004b-3910-8037-b6c04f504633"
        description: "The identifier of the AMT Device associated with this environment(endpoint)"
      AuthorizedTeams:
        type: "array"
        items:
          type: "integer"
          example: 1
          description: "Team Identifier"
      AuthorizedUsers:
        type: "array"
        description: "Deprecated in DBVersion == 18"
        items:
          type: "integer"
          example: 1
      AzureCredentials:
        $ref: "#/definitions/portainer.AzureCredentials"
      ComposeSyntaxMaxVersion:
        type: "string"
        example: "3.8"
        description: "Maximum version of docker-compose"
      EdgeCheckinInterval:
        type: "integer"
        example: 5
        description: "The check in interval for edge agent (in seconds)"
      EdgeID:
        type: "string"
        description: "The identifier of the edge agent associated with this environment(endpoint)"
      EdgeKey:
        type: "string"
        description: "The key which is used to map the agent to Portainer"
      Gpus:
        type: "array"
        items:
          $ref: "#/definitions/portainer.Pair"
      GroupId:
        type: "integer"
        example: 1
        description: "Environment(Endpoint) group identifier"
      Id:
        type: "integer"
        example: 1
        description: "Environment(Endpoint) Identifier"
      Kubernetes:
        description: "Associated Kubernetes data"
        $ref: "#/definitions/portainer.KubernetesData"
      Name:
        type: "string"
        example: "my-environment"
        description: "Environment(Endpoint) name"
      PostInitMigrations:
        description: "Whether we need to run any \"post init migrations\"."
        $ref: "#/definitions/portainer.EndpointPostInitMigrations"
      PublicURL:
        type: "string"
        example: "docker.mydomain.tld:2375"
        description: "URL or IP address where exposed containers will be reachable"
      Snapshots:
        type: "array"
        description: "List of snapshots"
        items:
          $ref: "#/definitions/portainer.DockerSnapshot"
      Status:
        type: "integer"
        example: 1
        description: "The status of the environment(endpoint) (1 - up, 2 - down)"
      TLS:
        type: "boolean"
        description: "Deprecated fields\nDeprecated in DBVersion == 4"
      TLSCACert:
        type: "string"
      TLSCert:
        type: "string"
      TLSConfig:
        $ref: "#/definitions/portainer.TLSConfiguration"
      TLSKey:
        type: "string"
      TagIds:
        type: "array"
        description: "List of tag identifiers to which this environment(endpoint)\
          \ is associated"
        items:
          type: "integer"
          example: 1
          description: "Tag identifier"
      Tags:
        type: "array"
        description: "Deprecated in DBVersion == 22"
        items:
          type: "string"
      TeamAccessPolicies:
        description: "List of team identifiers authorized to connect to this environment(endpoint)"
        $ref: "#/definitions/portainer.TeamAccessPolicies"
      Type:
        type: "integer"
        example: 1
        description: "Environment(Endpoint) environment(endpoint) type. 1 for a Docker\
          \ environment(endpoint), 2 for an agent on Docker environment(endpoint)\
          \ or 3 for an Azure environment(endpoint)."
      URL:
        type: "string"
        example: "docker.mydomain.tld:2375"
        description: "URL or IP address of the Docker host associated to this environment(endpoint)"
      UserAccessPolicies:
        description: "List of user identifiers authorized to connect to this environment(endpoint)"
        $ref: "#/definitions/portainer.UserAccessPolicies"
      agent:
        $ref: "portainer.Endpoint_agent"
      edge:
        $ref: "portainer.Endpoint_edge"
      isEdgeDevice:
        type: "boolean"
        description: "IsEdgeDevice marks if the environment was created as an EdgeDevice"
      lastCheckInDate:
        type: "integer"
        description: "LastCheckInDate mark last check-in date on checkin"
      queryDate:
        type: "integer"
        description: "QueryDate of each query with the endpoints list"
      securitySettings:
        description: "Environment(Endpoint) specific security settings"
        $ref: "#/definitions/portainer.EndpointSecuritySettings"
      userTrusted:
        type: "boolean"
        description: "Whether the device has been trusted or not by the user"
    example:
      agent:
        version: "1.0.0"
      TagIds:
      - 1
      - 1
      AzureCredentials:
        TenantID: "34ddc78d-4fel-2358-8cc1-df84c8o839f5"
        AuthenticationKey: "cOrXoK/1D35w8YQ8nH1/8ZGwzz45JIYD5jxHKXEQknk="
        ApplicationID: "eag7cdo9-o09l-9i83-9dO9-f0b23oe78db4"
      EdgeCheckinInterval: 5
      Gpus:
      - name: "name"
        value: "value"
      - name: "name"
        value: "value"
      TLSCACert: "TLSCACert"
      UserAccessPolicies: {}
      URL: "docker.mydomain.tld:2375"
      EdgeKey: "EdgeKey"
      Name: "my-environment"
      lastCheckInDate: 1
      edge:
        CommandInterval: 60
        SnapshotInterval: 60
        PingInterval: 60
        asyncMode: true
      queryDate: 4
      PublicURL: "docker.mydomain.tld:2375"
      EdgeID: "EdgeID"
      TLS: true
      Snapshots:
      - GpuUseAll: true
        StackCount: 4
        UnhealthyContainerCount: 6
        GpuUseList:
        - "GpuUseList"
        - "GpuUseList"
        NodeCount: 9
        HealthyContainerCount: 2
        Time: 1
        VolumeCount: 7
        ServiceCount: 2
        DockerSnapshotRaw: {}
        Swarm: true
        ImageCount: 7
        DockerVersion: "DockerVersion"
        TotalCPU: 1
        StoppedContainerCount: 7
        TotalMemory: 1
        RunningContainerCount: 3
      - GpuUseAll: true
        StackCount: 4
        UnhealthyContainerCount: 6
        GpuUseList:
        - "GpuUseList"
        - "GpuUseList"
        NodeCount: 9
        HealthyContainerCount: 2
        Time: 1
        VolumeCount: 7
        ServiceCount: 2
        DockerSnapshotRaw: {}
        Swarm: true
        ImageCount: 7
        DockerVersion: "DockerVersion"
        TotalCPU: 1
        StoppedContainerCount: 7
        TotalMemory: 1
        RunningContainerCount: 3
      TeamAccessPolicies: {}
      AuthorizedTeams:
      - 1
      - 1
      Tags:
      - "Tags"
      - "Tags"
      Status: 1
      isEdgeDevice: true
      securitySettings:
        allowContainerCapabilitiesForRegularUsers: true
        allowVolumeBrowserForRegularUsers: true
        allowDeviceMappingForRegularUsers: true
        allowPrivilegedModeForRegularUsers: false
        allowSysctlSettingForRegularUsers: true
        allowStackManagementForRegularUsers: true
        allowHostNamespaceForRegularUsers: true
        enableHostManagementFeatures: true
        allowBindMountsForRegularUsers: false
      ComposeSyntaxMaxVersion: "3.8"
      TLSKey: "TLSKey"
      TLSConfig:
        TLSCert: "/data/tls/cert.pem"
        TLSSkipVerify: false
        TLSCACert: "/data/tls/ca.pem"
        TLSKey: "/data/tls/key.pem"
        TLS: true
      PostInitMigrations:
        MigrateIngresses: true
      GroupId: 1
      userTrusted: true
      TLSCert: "TLSCert"
      Type: 1
      AuthorizedUsers:
      - 1
      - 1
      Id: 1
      AMTDeviceGUID: "4c4c4544-004b-3910-8037-b6c04f504633"
      Kubernetes:
        Configuration:
          RestrictDefaultNamespace: true
          UseLoadBalancer: true
          ResourceOverCommitPercentage: 0
          IngressAvailabilityPerNamespace: true
          UseServerMetrics: true
          IngressClasses:
          - BlockedNamespaces:
            - "BlockedNamespaces"
            - "BlockedNamespaces"
            Type: "Type"
            Blocked: true
            Name: "Name"
          - BlockedNamespaces:
            - "BlockedNamespaces"
            - "BlockedNamespaces"
            Type: "Type"
            Blocked: true
            Name: "Name"
          StorageClasses:
          - AllowVolumeExpansion: true
            Provisioner: "Provisioner"
            AccessModes:
            - "AccessModes"
            - "AccessModes"
            Name: "Name"
          - AllowVolumeExpansion: true
            Provisioner: "Provisioner"
            AccessModes:
            - "AccessModes"
            - "AccessModes"
            Name: "Name"
          AllowNoneIngressClass: true
          EnableResourceOverCommit: true
        Flags:
          IsServerStorageDetected: true
          IsServerMetricsDetected: true
        Snapshots:
        - KubernetesVersion: "KubernetesVersion"
          NodeCount: 6
          TotalCPU: 5
          Time: 1
          TotalMemory: 5
        - KubernetesVersion: "KubernetesVersion"
          NodeCount: 6
          TotalCPU: 5
          Time: 1
          TotalMemory: 5
  portainer.EndpointAuthorizations:
    type: "object"
    additionalProperties:
      $ref: "#/definitions/portainer.Authorizations"
  portainer.EndpointGroup:
    type: "object"
    properties:
      AuthorizedTeams:
        type: "array"
        items:
          type: "integer"
          example: 1
          description: "Team Identifier"
      AuthorizedUsers:
        type: "array"
        description: "Deprecated in DBVersion == 18"
        items:
          type: "integer"
          example: 1
      Description:
        type: "string"
        example: "Environment(Endpoint) group description"
        description: "Description associated to the environment(endpoint) group"
      Id:
        type: "integer"
        example: 1
        description: "Environment(Endpoint) group Identifier"
      Labels:
        type: "array"
        description: "Deprecated fields"
        items:
          $ref: "#/definitions/portainer.Pair"
      Name:
        type: "string"
        example: "my-environment-group"
        description: "Environment(Endpoint) group name"
      TagIds:
        type: "array"
        description: "List of tags associated to this environment(endpoint) group"
        items:
          type: "integer"
          example: 1
          description: "Tag identifier"
      Tags:
        type: "array"
        description: "Deprecated in DBVersion == 22"
        items:
          type: "string"
      TeamAccessPolicies:
        $ref: "#/definitions/portainer.TeamAccessPolicies"
      UserAccessPolicies:
        $ref: "#/definitions/portainer.UserAccessPolicies"
    example:
      Description: "Environment(Endpoint) group description"
      TagIds:
      - 1
      - 1
      AuthorizedUsers:
      - 1
      - 1
      UserAccessPolicies: {}
      Labels:
      - name: "name"
        value: "value"
      - name: "name"
        value: "value"
      Id: 1
      TeamAccessPolicies: {}
      AuthorizedTeams:
      - 1
      - 1
      Tags:
      - "Tags"
      - "Tags"
      Name: "my-environment-group"
  portainer.EndpointPostInitMigrations:
    type: "object"
    properties:
      MigrateIngresses:
        type: "boolean"
    example:
      MigrateIngresses: true
  portainer.EndpointSecuritySettings:
    type: "object"
    properties:
      allowBindMountsForRegularUsers:
        type: "boolean"
        example: false
        description: "Whether non-administrator should be able to use bind mounts\
          \ when creating containers"
      allowContainerCapabilitiesForRegularUsers:
        type: "boolean"
        example: true
        description: "Whether non-administrator should be able to use container capabilities"
      allowDeviceMappingForRegularUsers:
        type: "boolean"
        example: true
        description: "Whether non-administrator should be able to use device mapping"
      allowHostNamespaceForRegularUsers:
        type: "boolean"
        example: true
        description: "Whether non-administrator should be able to use the host pid"
      allowPrivilegedModeForRegularUsers:
        type: "boolean"
        example: false
        description: "Whether non-administrator should be able to use privileged mode\
          \ when creating containers"
      allowStackManagementForRegularUsers:
        type: "boolean"
        example: true
        description: "Whether non-administrator should be able to manage stacks"
      allowSysctlSettingForRegularUsers:
        type: "boolean"
        example: true
        description: "Whether non-administrator should be able to use sysctl settings"
      allowVolumeBrowserForRegularUsers:
        type: "boolean"
        example: true
        description: "Whether non-administrator should be able to browse volumes"
      enableHostManagementFeatures:
        type: "boolean"
        example: true
        description: "Whether host management features are enabled"
    example:
      allowContainerCapabilitiesForRegularUsers: true
      allowVolumeBrowserForRegularUsers: true
      allowDeviceMappingForRegularUsers: true
      allowPrivilegedModeForRegularUsers: false
      allowSysctlSettingForRegularUsers: true
      allowStackManagementForRegularUsers: true
      allowHostNamespaceForRegularUsers: true
      enableHostManagementFeatures: true
      allowBindMountsForRegularUsers: false
  portainer.FDOConfiguration:
    type: "object"
    properties:
      enabled:
        type: "boolean"
      ownerPassword:
        type: "string"
      ownerURL:
        type: "string"
      ownerUsername:
        type: "string"
    example:
      ownerPassword: "ownerPassword"
      ownerUsername: "ownerUsername"
      ownerURL: "ownerURL"
      enabled: true
  portainer.GitlabRegistryData:
    type: "object"
    properties:
      InstanceURL:
        type: "string"
      ProjectId:
        type: "integer"
      ProjectPath:
        type: "string"
    example:
      InstanceURL: "InstanceURL"
      ProjectId: 6
      ProjectPath: "ProjectPath"
  portainer.HelmUserRepository:
    type: "object"
    properties:
      Id:
        type: "integer"
        example: 1
        description: "Membership Identifier"
      URL:
        type: "string"
        example: "https://charts.bitnami.com/bitnami"
        description: "Helm repository URL"
      UserId:
        type: "integer"
        example: 1
        description: "User identifier"
    example:
      UserId: 1
      Id: 1
      URL: "https://charts.bitnami.com/bitnami"
  portainer.InternalAuthSettings:
    type: "object"
    properties:
      requiredPasswordLength:
        type: "integer"
    example:
      requiredPasswordLength: 0
  portainer.K8sNodeLimits:
    type: "object"
    properties:
      CPU:
        type: "integer"
      Memory:
        type: "integer"
  portainer.K8sNodesLimits:
    type: "object"
    additionalProperties:
      $ref: "#/definitions/portainer.K8sNodeLimits"
  portainer.KubernetesConfiguration:
    type: "object"
    properties:
      AllowNoneIngressClass:
        type: "boolean"
      EnableResourceOverCommit:
        type: "boolean"
      IngressAvailabilityPerNamespace:
        type: "boolean"
      IngressClasses:
        type: "array"
        items:
          $ref: "#/definitions/portainer.KubernetesIngressClassConfig"
      ResourceOverCommitPercentage:
        type: "integer"
      RestrictDefaultNamespace:
        type: "boolean"
      StorageClasses:
        type: "array"
        items:
          $ref: "#/definitions/portainer.KubernetesStorageClassConfig"
      UseLoadBalancer:
        type: "boolean"
      UseServerMetrics:
        type: "boolean"
    example:
      RestrictDefaultNamespace: true
      UseLoadBalancer: true
      ResourceOverCommitPercentage: 0
      IngressAvailabilityPerNamespace: true
      UseServerMetrics: true
      IngressClasses:
      - BlockedNamespaces:
        - "BlockedNamespaces"
        - "BlockedNamespaces"
        Type: "Type"
        Blocked: true
        Name: "Name"
      - BlockedNamespaces:
        - "BlockedNamespaces"
        - "BlockedNamespaces"
        Type: "Type"
        Blocked: true
        Name: "Name"
      StorageClasses:
      - AllowVolumeExpansion: true
        Provisioner: "Provisioner"
        AccessModes:
        - "AccessModes"
        - "AccessModes"
        Name: "Name"
      - AllowVolumeExpansion: true
        Provisioner: "Provisioner"
        AccessModes:
        - "AccessModes"
        - "AccessModes"
        Name: "Name"
      AllowNoneIngressClass: true
      EnableResourceOverCommit: true
  portainer.KubernetesData:
    type: "object"
    properties:
      Configuration:
        $ref: "#/definitions/portainer.KubernetesConfiguration"
      Flags:
        $ref: "#/definitions/portainer.KubernetesFlags"
      Snapshots:
        type: "array"
        items:
          $ref: "#/definitions/portainer.KubernetesSnapshot"
    example:
      Configuration:
        RestrictDefaultNamespace: true
        UseLoadBalancer: true
        ResourceOverCommitPercentage: 0
        IngressAvailabilityPerNamespace: true
        UseServerMetrics: true
        IngressClasses:
        - BlockedNamespaces:
          - "BlockedNamespaces"
          - "BlockedNamespaces"
          Type: "Type"
          Blocked: true
          Name: "Name"
        - BlockedNamespaces:
          - "BlockedNamespaces"
          - "BlockedNamespaces"
          Type: "Type"
          Blocked: true
          Name: "Name"
        StorageClasses:
        - AllowVolumeExpansion: true
          Provisioner: "Provisioner"
          AccessModes:
          - "AccessModes"
          - "AccessModes"
          Name: "Name"
        - AllowVolumeExpansion: true
          Provisioner: "Provisioner"
          AccessModes:
          - "AccessModes"
          - "AccessModes"
          Name: "Name"
        AllowNoneIngressClass: true
        EnableResourceOverCommit: true
      Flags:
        IsServerStorageDetected: true
        IsServerMetricsDetected: true
      Snapshots:
      - KubernetesVersion: "KubernetesVersion"
        NodeCount: 6
        TotalCPU: 5
        Time: 1
        TotalMemory: 5
      - KubernetesVersion: "KubernetesVersion"
        NodeCount: 6
        TotalCPU: 5
        Time: 1
        TotalMemory: 5
  portainer.KubernetesFlags:
    type: "object"
    properties:
      IsServerMetricsDetected:
        type: "boolean"
      IsServerStorageDetected:
        type: "boolean"
    example:
      IsServerStorageDetected: true
      IsServerMetricsDetected: true
  portainer.KubernetesIngressClassConfig:
    type: "object"
    properties:
      Blocked:
        type: "boolean"
      BlockedNamespaces:
        type: "array"
        items:
          type: "string"
      Name:
        type: "string"
      Type:
        type: "string"
    example:
      BlockedNamespaces:
      - "BlockedNamespaces"
      - "BlockedNamespaces"
      Type: "Type"
      Blocked: true
      Name: "Name"
  portainer.KubernetesSnapshot:
    type: "object"
    properties:
      KubernetesVersion:
        type: "string"
      NodeCount:
        type: "integer"
      Time:
        type: "integer"
      TotalCPU:
        type: "integer"
      TotalMemory:
        type: "integer"
    example:
      KubernetesVersion: "KubernetesVersion"
      NodeCount: 6
      TotalCPU: 5
      Time: 1
      TotalMemory: 5
  portainer.KubernetesStorageClassConfig:
    type: "object"
    properties:
      AccessModes:
        type: "array"
        items:
          type: "string"
      AllowVolumeExpansion:
        type: "boolean"
      Name:
        type: "string"
      Provisioner:
        type: "string"
    example:
      AllowVolumeExpansion: true
      Provisioner: "Provisioner"
      AccessModes:
      - "AccessModes"
      - "AccessModes"
      Name: "Name"
  portainer.LDAPGroupSearchSettings:
    type: "object"
    properties:
      GroupAttribute:
        type: "string"
        example: "member"
        description: "LDAP attribute which denotes the group membership"
      GroupBaseDN:
        type: "string"
        example: "dc=ldap,dc=domain,dc=tld"
        description: "The distinguished name of the element from which the LDAP server\
          \ will search for groups"
      GroupFilter:
        type: "string"
        example: "(objectClass=account"
        description: "The LDAP search filter used to select group elements, optional"
    example:
      GroupBaseDN: "dc=ldap,dc=domain,dc=tld"
      GroupFilter: "(objectClass=account"
      GroupAttribute: "member"
  portainer.LDAPSearchSettings:
    type: "object"
    properties:
      BaseDN:
        type: "string"
        example: "dc=ldap,dc=domain,dc=tld"
        description: "The distinguished name of the element from which the LDAP server\
          \ will search for users"
      Filter:
        type: "string"
        example: "(objectClass=account)"
        description: "Optional LDAP search filter used to select user elements"
      UserNameAttribute:
        type: "string"
        example: "uid"
        description: "LDAP attribute which denotes the username"
    example:
      Filter: "(objectClass=account)"
      BaseDN: "dc=ldap,dc=domain,dc=tld"
      UserNameAttribute: "uid"
  portainer.LDAPSettings:
    type: "object"
    properties:
      AnonymousMode:
        type: "boolean"
        example: true
        description: "Enable this option if the server is configured for Anonymous\
          \ access. When enabled, ReaderDN and Password will not be used"
      AutoCreateUsers:
        type: "boolean"
        example: true
        description: "Automatically provision users and assign them to matching LDAP\
          \ group names"
      GroupSearchSettings:
        type: "array"
        items:
          $ref: "#/definitions/portainer.LDAPGroupSearchSettings"
      Password:
        type: "string"
        example: "readonly-password"
        description: "Password of the account that will be used to search users"
      ReaderDN:
        type: "string"
        example: "cn=readonly-account,dc=ldap,dc=domain,dc=tld"
        description: "Account that will be used to search for users"
      SearchSettings:
        type: "array"
        items:
          $ref: "#/definitions/portainer.LDAPSearchSettings"
      StartTLS:
        type: "boolean"
        example: true
        description: "Whether LDAP connection should use StartTLS"
      TLSConfig:
        $ref: "#/definitions/portainer.TLSConfiguration"
      URL:
        type: "string"
        example: "myldap.domain.tld:389"
        description: "URL or IP address of the LDAP server"
    example:
      GroupSearchSettings:
      - GroupBaseDN: "dc=ldap,dc=domain,dc=tld"
        GroupFilter: "(objectClass=account"
        GroupAttribute: "member"
      - GroupBaseDN: "dc=ldap,dc=domain,dc=tld"
        GroupFilter: "(objectClass=account"
        GroupAttribute: "member"
      ReaderDN: "cn=readonly-account,dc=ldap,dc=domain,dc=tld"
      AutoCreateUsers: true
      SearchSettings:
      - Filter: "(objectClass=account)"
        BaseDN: "dc=ldap,dc=domain,dc=tld"
        UserNameAttribute: "uid"
      - Filter: "(objectClass=account)"
        BaseDN: "dc=ldap,dc=domain,dc=tld"
        UserNameAttribute: "uid"
      TLSConfig:
        TLSCert: "/data/tls/cert.pem"
        TLSSkipVerify: false
        TLSCACert: "/data/tls/ca.pem"
        TLSKey: "/data/tls/key.pem"
        TLS: true
      AnonymousMode: true
      URL: "myldap.domain.tld:389"
      Password: "readonly-password"
      StartTLS: true
  portainer.OAuthSettings:
    type: "object"
    properties:
      AccessTokenURI:
        type: "string"
      AuthorizationURI:
        type: "string"
      ClientID:
        type: "string"
      ClientSecret:
        type: "string"
      DefaultTeamID:
        type: "integer"
      KubeSecretKey:
        type: "array"
        items:
          type: "integer"
      LogoutURI:
        type: "string"
      OAuthAutoCreateUsers:
        type: "boolean"
      RedirectURI:
        type: "string"
      ResourceURI:
        type: "string"
      SSO:
        type: "boolean"
      Scopes:
        type: "string"
      UserIdentifier:
        type: "string"
    example:
      ResourceURI: "ResourceURI"
      OAuthAutoCreateUsers: true
      AccessTokenURI: "AccessTokenURI"
      LogoutURI: "LogoutURI"
      RedirectURI: "RedirectURI"
      SSO: true
      KubeSecretKey:
      - 1
      - 1
      AuthorizationURI: "AuthorizationURI"
      ClientSecret: "ClientSecret"
      Scopes: "Scopes"
      ClientID: "ClientID"
      DefaultTeamID: 6
      UserIdentifier: "UserIdentifier"
  portainer.OpenAMTConfiguration:
    type: "object"
    properties:
      certFileContent:
        type: "string"
      certFileName:
        type: "string"
      certFilePassword:
        type: "string"
      domainName:
        type: "string"
      enabled:
        type: "boolean"
      mpsPassword:
        type: "string"
      mpsServer:
        type: "string"
      mpsToken:
        type: "string"
        description: "retrieved from API"
      mpsUser:
        type: "string"
    example:
      mpsToken: "mpsToken"
      certFilePassword: "certFilePassword"
      domainName: "domainName"
      mpsPassword: "mpsPassword"
      certFileContent: "certFileContent"
      mpsServer: "mpsServer"
      mpsUser: "mpsUser"
      enabled: true
      certFileName: "certFileName"
  portainer.OpenAMTDeviceEnabledFeatures:
    type: "object"
    properties:
      IDER:
        type: "boolean"
      KVM:
        type: "boolean"
      SOL:
        type: "boolean"
      redirection:
        type: "boolean"
      userConsent:
        type: "string"
  portainer.Pair:
    type: "object"
    properties:
      name:
        type: "string"
        example: "name"
      value:
        type: "string"
        example: "value"
    example:
      name: "name"
      value: "value"
  portainer.QuayRegistryData:
    type: "object"
    properties:
      OrganisationName:
        type: "string"
      UseOrganisation:
        type: "boolean"
    example:
      OrganisationName: "OrganisationName"
      UseOrganisation: true
  portainer.Registry:
    type: "object"
    properties:
      AccessToken:
        type: "string"
        description: "Stores temporary access token"
      AccessTokenExpiry:
        type: "integer"
      Authentication:
        type: "boolean"
        example: true
        description: "Is authentication against this registry enabled"
      AuthorizedTeams:
        type: "array"
        description: "Deprecated in DBVersion == 18"
        items:
          type: "integer"
          example: 1
          description: "Team Identifier"
      AuthorizedUsers:
        type: "array"
        description: "Deprecated in DBVersion == 18"
        items:
          type: "integer"
          example: 1
      BaseURL:
        type: "string"
        example: "registry.mydomain.tld:2375"
        description: "Base URL, introduced for ProGet registry"
      Ecr:
        $ref: "#/definitions/portainer.EcrData"
      Gitlab:
        $ref: "#/definitions/portainer.GitlabRegistryData"
      Id:
        type: "integer"
        example: 1
        description: "Registry Identifier"
      ManagementConfiguration:
        $ref: "#/definitions/portainer.RegistryManagementConfiguration"
      Name:
        type: "string"
        example: "my-registry"
        description: "Registry Name"
      Password:
        type: "string"
        example: "registry_password"
        description: "Password or SecretAccessKey used to authenticate against this\
          \ registry"
      Quay:
        $ref: "#/definitions/portainer.QuayRegistryData"
      RegistryAccesses:
        $ref: "#/definitions/portainer.RegistryAccesses"
      TeamAccessPolicies:
        description: "Deprecated in DBVersion == 31"
        $ref: "#/definitions/portainer.TeamAccessPolicies"
      Type:
        type: "integer"
        description: "Registry Type (1 - Quay, 2 - Azure, 3 - Custom, 4 - Gitlab,\
          \ 5 - ProGet, 6 - DockerHub, 7 - ECR)"
      URL:
        type: "string"
        example: "registry.mydomain.tld:2375"
        description: "URL or IP address of the Docker registry"
      UserAccessPolicies:
        description: "Deprecated fields\nDeprecated in DBVersion == 31"
        $ref: "#/definitions/portainer.UserAccessPolicies"
      Username:
        type: "string"
        example: "registry user"
        description: "Username or AccessKeyID used to authenticate against this registry"
    example:
      ManagementConfiguration:
        Type: 5
        AccessTokenExpiry: 1
        Ecr:
          Region: "ap-southeast-2"
        Username: "Username"
        AccessToken: "AccessToken"
        Authentication: true
        TLSConfig:
          TLSCert: "/data/tls/cert.pem"
          TLSSkipVerify: false
          TLSCACert: "/data/tls/ca.pem"
          TLSKey: "/data/tls/key.pem"
          TLS: true
        Password: "Password"
      RegistryAccesses: {}
      UserAccessPolicies: {}
      URL: "registry.mydomain.tld:2375"
      Name: "my-registry"
      Type: 5
      AuthorizedUsers:
      - 1
      - 1
      AccessTokenExpiry: 0
      Ecr:
        Region: "ap-southeast-2"
      Username: "registry user"
      AccessToken: "AccessToken"
      Authentication: true
      Quay:
        OrganisationName: "OrganisationName"
        UseOrganisation: true
      BaseURL: "registry.mydomain.tld:2375"
      Id: 1
      Gitlab:
        InstanceURL: "InstanceURL"
        ProjectId: 6
        ProjectPath: "ProjectPath"
      TeamAccessPolicies: {}
      AuthorizedTeams:
      - 1
      - 1
      Password: "registry_password"
  portainer.RegistryAccessPolicies:
    type: "object"
    properties:
      Namespaces:
        type: "array"
        items:
          type: "string"
      TeamAccessPolicies:
        $ref: "#/definitions/portainer.TeamAccessPolicies"
      UserAccessPolicies:
        $ref: "#/definitions/portainer.UserAccessPolicies"
  portainer.RegistryAccesses:
    type: "object"
    additionalProperties:
      $ref: "#/definitions/portainer.RegistryAccessPolicies"
  portainer.RegistryManagementConfiguration:
    type: "object"
    properties:
      AccessToken:
        type: "string"
      AccessTokenExpiry:
        type: "integer"
      Authentication:
        type: "boolean"
      Ecr:
        $ref: "#/definitions/portainer.EcrData"
      Password:
        type: "string"
      TLSConfig:
        $ref: "#/definitions/portainer.TLSConfiguration"
      Type:
        type: "integer"
      Username:
        type: "string"
    example:
      Type: 5
      AccessTokenExpiry: 1
      Ecr:
        Region: "ap-southeast-2"
      Username: "Username"
      AccessToken: "AccessToken"
      Authentication: true
      TLSConfig:
        TLSCert: "/data/tls/cert.pem"
        TLSSkipVerify: false
        TLSCACert: "/data/tls/ca.pem"
        TLSKey: "/data/tls/key.pem"
        TLS: true
      Password: "Password"
  portainer.ResourceControl:
    type: "object"
    properties:
      AccessLevel:
        type: "integer"
      AdministratorsOnly:
        type: "boolean"
        example: true
        description: "Permit access to resource only to admins"
      Id:
        type: "integer"
        example: 1
        description: "ResourceControl Identifier"
      OwnerId:
        type: "integer"
        description: "Deprecated fields\nDeprecated in DBVersion == 2"
      Public:
        type: "boolean"
        example: true
        description: "Permit access to the associated resource to any user"
      ResourceId:
        type: "string"
        example: "617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08"
        description: "Docker resource identifier on which access control will be applied.\\\
          \nIn the case of a resource control applied to a stack, use the stack name\
          \ as identifier"
      SubResourceIds:
        type: "array"
        example:
        - "617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08"
        description: "List of Docker resources that will inherit this access control"
        items:
          type: "string"
      System:
        type: "boolean"
      TeamAccesses:
        type: "array"
        items:
          $ref: "#/definitions/portainer.TeamResourceAccess"
      Type:
        type: "integer"
        example: 1
        description: "Type of Docker resource. Valid values are: 1- container, 2 -service\n\
          3 - volume, 4 - secret, 5 - stack, 6 - config or 7 - custom template"
      UserAccesses:
        type: "array"
        items:
          $ref: "#/definitions/portainer.UserResourceAccess"
    example:
      SubResourceIds:
      - "617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08"
      Type: 1
      OwnerId: 6
      ResourceId: "617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08"
      UserAccesses:
      - UserId: 2
        AccessLevel: 5
      - UserId: 2
        AccessLevel: 5
      TeamAccesses:
      - TeamId: 5
        AccessLevel: 1
      - TeamId: 5
        AccessLevel: 1
      AdministratorsOnly: true
      Id: 1
      Public: true
      AccessLevel: 0
      System: true
  portainer.Role:
    type: "object"
    properties:
      Authorizations:
        description: "Authorizations associated to a role"
        $ref: "#/definitions/portainer.Authorizations"
      Description:
        type: "string"
        example: "Read-only access of all resources in an environment(endpoint)"
        description: "Role description"
      Id:
        type: "integer"
        example: 1
        description: "Role Identifier"
      Name:
        type: "string"
        example: "HelpDesk"
        description: "Role name"
      Priority:
        type: "integer"
    example:
      Authorizations: {}
      Description: "Read-only access of all resources in an environment(endpoint)"
      Priority: 0
      Id: 1
      Name: "HelpDesk"
  portainer.SSLSettings:
    type: "object"
    properties:
      certPath:
        type: "string"
      httpEnabled:
        type: "boolean"
      keyPath:
        type: "string"
      selfSigned:
        type: "boolean"
    example:
      certPath: "certPath"
      httpEnabled: true
      keyPath: "keyPath"
      selfSigned: true
  portainer.Settings:
    type: "object"
    properties:
      AgentSecret:
        type: "string"
        description: "Container environment parameter AGENT_SECRET"
      AllowBindMountsForRegularUsers:
        type: "boolean"
      AllowContainerCapabilitiesForRegularUsers:
        type: "boolean"
      AllowDeviceMappingForRegularUsers:
        type: "boolean"
      AllowHostNamespaceForRegularUsers:
        type: "boolean"
      AllowPrivilegedModeForRegularUsers:
        type: "boolean"
      AllowStackManagementForRegularUsers:
        type: "boolean"
      AllowVolumeBrowserForRegularUsers:
        type: "boolean"
      AuthenticationMethod:
        type: "integer"
        example: 1
        description: "Active authentication method for the Portainer instance. Valid\
          \ values are: 1 for internal, 2 for LDAP, or 3 for oauth"
      BlackListedLabels:
        type: "array"
        description: "A list of label name & value that will be used to hide containers\
          \ when querying containers"
        items:
          $ref: "#/definitions/portainer.Pair"
      EdgeAgentCheckinInterval:
        type: "integer"
        example: 5
        description: "The default check in interval for edge agent (in seconds)"
      EdgePortainerUrl:
        type: "string"
        description: "EdgePortainerURL is the URL that is exposed to edge agents"
      EnableEdgeComputeFeatures:
        type: "boolean"
        description: "Whether edge compute features are enabled"
      EnableHostManagementFeatures:
        type: "boolean"
        description: "Deprecated fields v26"
      EnableTelemetry:
        type: "boolean"
        example: false
        description: "Whether telemetry is enabled"
      EnforceEdgeID:
        type: "boolean"
        example: false
        description: "EnforceEdgeID makes Portainer store the Edge ID instead of accepting\
          \ anyone"
      FeatureFlagSettings:
        type: "object"
        additionalProperties:
          type: "boolean"
      HelmRepositoryURL:
        type: "string"
        example: "https://charts.bitnami.com/bitnami"
        description: "Helm repository URL, defaults to \"https://charts.bitnami.com/bitnami\""
      InternalAuthSettings:
        $ref: "#/definitions/portainer.InternalAuthSettings"
      KubeconfigExpiry:
        type: "string"
        example: "24h"
        description: "The expiry of a Kubeconfig"
      KubectlShellImage:
        type: "string"
        example: "portainer/kubectl-shell"
        description: "KubectlImage, defaults to portainer/kubectl-shell"
      LDAPSettings:
        $ref: "#/definitions/portainer.LDAPSettings"
      LogoURL:
        type: "string"
        example: "https://mycompany.mydomain.tld/logo.png"
        description: "URL to a logo that will be displayed on the login page as well\
          \ as on top of the sidebar. Will use default Portainer logo when value is\
          \ empty string"
      OAuthSettings:
        $ref: "#/definitions/portainer.OAuthSettings"
      ShowKomposeBuildOption:
        type: "boolean"
        example: false
        description: "Show the Kompose build option (discontinued in 2.18)"
      SnapshotInterval:
        type: "string"
        example: "5m"
        description: "The interval in which environment(endpoint) snapshots are created"
      TemplatesURL:
        type: "string"
        example: "https://raw.githubusercontent.com/portainer/templates/master/templates.json"
        description: "URL to the templates that will be displayed in the UI when navigating\
          \ to App Templates"
      TrustOnFirstConnect:
        type: "boolean"
        example: false
        description: "TrustOnFirstConnect makes Portainer accepting edge agent connection\
          \ by default"
      UserSessionTimeout:
        type: "string"
        example: "5m"
        description: "The duration of a user session"
      displayDonationHeader:
        type: "boolean"
        description: "Deprecated fields"
      displayExternalContributors:
        type: "boolean"
      edge:
        $ref: "portainer.Settings_edge"
      fdoConfiguration:
        $ref: "#/definitions/portainer.FDOConfiguration"
      openAMTConfiguration:
        $ref: "#/definitions/portainer.OpenAMTConfiguration"
    example:
      LogoURL: "https://mycompany.mydomain.tld/logo.png"
      LDAPSettings:
        GroupSearchSettings:
        - GroupBaseDN: "dc=ldap,dc=domain,dc=tld"
          GroupFilter: "(objectClass=account"
          GroupAttribute: "member"
        - GroupBaseDN: "dc=ldap,dc=domain,dc=tld"
          GroupFilter: "(objectClass=account"
          GroupAttribute: "member"
        ReaderDN: "cn=readonly-account,dc=ldap,dc=domain,dc=tld"
        AutoCreateUsers: true
        SearchSettings:
        - Filter: "(objectClass=account)"
          BaseDN: "dc=ldap,dc=domain,dc=tld"
          UserNameAttribute: "uid"
        - Filter: "(objectClass=account)"
          BaseDN: "dc=ldap,dc=domain,dc=tld"
          UserNameAttribute: "uid"
        TLSConfig:
          TLSCert: "/data/tls/cert.pem"
          TLSSkipVerify: false
          TLSCACert: "/data/tls/ca.pem"
          TLSKey: "/data/tls/key.pem"
          TLS: true
        AnonymousMode: true
        URL: "myldap.domain.tld:389"
        Password: "readonly-password"
        StartTLS: true
      EnforceEdgeID: false
      AuthenticationMethod: 1
      TrustOnFirstConnect: false
      displayExternalContributors: true
      SnapshotInterval: "5m"
      AllowBindMountsForRegularUsers: true
      AllowHostNamespaceForRegularUsers: true
      edge:
        CommandInterval: 5
        SnapshotInterval: 5
        PingInterval: 5
        asyncMode: true
      EdgeAgentCheckinInterval: 5
      fdoConfiguration:
        ownerPassword: "ownerPassword"
        ownerUsername: "ownerUsername"
        ownerURL: "ownerURL"
        enabled: true
      EnableTelemetry: false
      HelmRepositoryURL: "https://charts.bitnami.com/bitnami"
      OAuthSettings:
        ResourceURI: "ResourceURI"
        OAuthAutoCreateUsers: true
        AccessTokenURI: "AccessTokenURI"
        LogoutURI: "LogoutURI"
        RedirectURI: "RedirectURI"
        SSO: true
        KubeSecretKey:
        - 1
        - 1
        AuthorizationURI: "AuthorizationURI"
        ClientSecret: "ClientSecret"
        Scopes: "Scopes"
        ClientID: "ClientID"
        DefaultTeamID: 6
        UserIdentifier: "UserIdentifier"
      openAMTConfiguration:
        mpsToken: "mpsToken"
        certFilePassword: "certFilePassword"
        domainName: "domainName"
        mpsPassword: "mpsPassword"
        certFileContent: "certFileContent"
        mpsServer: "mpsServer"
        mpsUser: "mpsUser"
        enabled: true
        certFileName: "certFileName"
      BlackListedLabels:
      - name: "name"
        value: "value"
      - name: "name"
        value: "value"
      AllowPrivilegedModeForRegularUsers: true
      AllowStackManagementForRegularUsers: true
      AllowContainerCapabilitiesForRegularUsers: true
      AgentSecret: "AgentSecret"
      ShowKomposeBuildOption: false
      EdgePortainerUrl: "EdgePortainerUrl"
      UserSessionTimeout: "5m"
      AllowDeviceMappingForRegularUsers: true
      EnableHostManagementFeatures: true
      InternalAuthSettings:
        requiredPasswordLength: 0
      KubectlShellImage: "portainer/kubectl-shell"
      KubeconfigExpiry: "24h"
      FeatureFlagSettings:
        key: true
      TemplatesURL: "https://raw.githubusercontent.com/portainer/templates/master/templates.json"
      AllowVolumeBrowserForRegularUsers: true
      displayDonationHeader: true
      EnableEdgeComputeFeatures: true
  portainer.Stack:
    type: "object"
    properties:
      AdditionalFiles:
        type: "array"
        description: "Only applies when deploying stack with multiple files"
        items:
          type: "string"
      AutoUpdate:
        description: "The auto update settings of a git stack"
        $ref: "#/definitions/portainer.StackAutoUpdate"
      EndpointId:
        type: "integer"
        example: 1
        description: "Environment(Endpoint) identifier. Reference the environment(endpoint)\
          \ that will be used for deployment"
      EntryPoint:
        type: "string"
        example: "docker-compose.yml"
        description: "Path to the Stack file"
      Env:
        type: "array"
        description: "A list of environment(endpoint) variables used during stack\
          \ deployment"
        items:
          $ref: "#/definitions/portainer.Pair"
      Id:
        type: "integer"
        example: 1
        description: "Stack Identifier"
      Name:
        type: "string"
        example: "myStack"
        description: "Stack name"
      Option:
        description: "The stack deployment option"
        $ref: "#/definitions/portainer.StackOption"
      ResourceControl:
        $ref: "#/definitions/portainer.ResourceControl"
      Status:
        type: "integer"
        example: 1
        description: "Stack status (1 - active, 2 - inactive)"
      SwarmId:
        type: "string"
        example: "jpofkc0i9uo9wtx1zesuk649w"
        description: "Cluster identifier of the Swarm cluster where the stack is deployed"
      Type:
        type: "integer"
        example: 2
        description: "Stack type. 1 for a Swarm stack, 2 for a Compose stack"
      createdBy:
        type: "string"
        example: "admin"
        description: "The username which created this stack"
      creationDate:
        type: "integer"
        example: 1587399600
        description: "The date in unix time when stack was created"
      fromAppTemplate:
        type: "boolean"
        example: false
        description: "Whether the stack is from a app template"
      gitConfig:
        description: "The git config of this stack"
        $ref: "#/definitions/gittypes.RepoConfig"
      isComposeFormat:
        type: "boolean"
        example: false
        description: "IsComposeFormat indicates if the Kubernetes stack is created\
          \ from a Docker Compose file"
      namespace:
        type: "string"
        example: "default"
        description: "Kubernetes namespace if stack is a kube application"
      projectPath:
        type: "string"
        example: "/data/compose/myStack_jpofkc0i9uo9wtx1zesuk649w"
        description: "Path on disk to the repository hosting the Stack file"
      updateDate:
        type: "integer"
        example: 1587399600
        description: "The date in unix time when stack was last updated"
      updatedBy:
        type: "string"
        example: "bob"
        description: "The username which last updated this stack"
    example:
      Status: 1
      updateDate: 1587399600
      updatedBy: "bob"
      projectPath: "/data/compose/myStack_jpofkc0i9uo9wtx1zesuk649w"
      EntryPoint: "docker-compose.yml"
      fromAppTemplate: false
      Env:
      - name: "name"
        value: "value"
      - name: "name"
        value: "value"
      creationDate: 1587399600
      ResourceControl:
        SubResourceIds:
        - "617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08"
        Type: 1
        OwnerId: 6
        ResourceId: "617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08"
        UserAccesses:
        - UserId: 2
          AccessLevel: 5
        - UserId: 2
          AccessLevel: 5
        TeamAccesses:
        - TeamId: 5
          AccessLevel: 1
        - TeamId: 5
          AccessLevel: 1
        AdministratorsOnly: true
        Id: 1
        Public: true
        AccessLevel: 0
        System: true
      Name: "myStack"
      gitConfig:
        configFilePath: "docker-compose.yml"
        configHash: "bc4c183d756879ea4d173315338110b31004b8e0"
        url: "https://github.com/portainer/portainer.git"
        authentication:
          gitCredentialID: 0
          password: "password"
          username: "username"
        referenceName: "refs/heads/branch_name"
      SwarmId: "jpofkc0i9uo9wtx1zesuk649w"
      Type: 2
      AdditionalFiles:
      - "AdditionalFiles"
      - "AdditionalFiles"
      AutoUpdate:
        jobID: "15"
        webhook: "05de31a2-79fa-4644-9c12-faa67e5c49f0"
        interval: "1m30s"
      createdBy: "admin"
      EndpointId: 1
      namespace: "default"
      Option:
        prune: false
      Id: 1
      isComposeFormat: false
  portainer.StackAutoUpdate:
    type: "object"
    properties:
      interval:
        type: "string"
        example: "1m30s"
        description: "Auto update interval"
      jobID:
        type: "string"
        example: "15"
        description: "Autoupdate job id"
      webhook:
        type: "string"
        example: "05de31a2-79fa-4644-9c12-faa67e5c49f0"
        description: "A UUID generated from client"
    example:
      jobID: "15"
      webhook: "05de31a2-79fa-4644-9c12-faa67e5c49f0"
      interval: "1m30s"
  portainer.StackOption:
    type: "object"
    properties:
      prune:
        type: "boolean"
        example: false
        description: "Prune services that are no longer referenced"
    example:
      prune: false
  portainer.TLSConfiguration:
    type: "object"
    properties:
      TLS:
        type: "boolean"
        example: true
        description: "Use TLS"
      TLSCACert:
        type: "string"
        example: "/data/tls/ca.pem"
        description: "Path to the TLS CA certificate file"
      TLSCert:
        type: "string"
        example: "/data/tls/cert.pem"
        description: "Path to the TLS client certificate file"
      TLSKey:
        type: "string"
        example: "/data/tls/key.pem"
        description: "Path to the TLS client key file"
      TLSSkipVerify:
        type: "boolean"
        example: false
        description: "Skip the verification of the server TLS certificate"
    example:
      TLSCert: "/data/tls/cert.pem"
      TLSSkipVerify: false
      TLSCACert: "/data/tls/ca.pem"
      TLSKey: "/data/tls/key.pem"
      TLS: true
  portainer.Tag:
    type: "object"
    properties:
      EndpointGroups:
        type: "object"
        description: "A set of environment(endpoint) group ids that have this tag"
        additionalProperties:
          type: "boolean"
      Endpoints:
        type: "object"
        description: "A set of environment(endpoint) ids that have this tag"
        additionalProperties:
          type: "boolean"
      Name:
        type: "string"
        example: "org/acme"
        description: "Tag name"
      id:
        type: "integer"
        example: 1
        description: "Tag identifier"
    example:
      Endpoints:
        key: true
      id: 1
      EndpointGroups:
        key: true
      Name: "org/acme"
  portainer.Team:
    type: "object"
    properties:
      Id:
        type: "integer"
        example: 1
        description: "Team Identifier"
      Name:
        type: "string"
        example: "developers"
        description: "Team name"
    example:
      Id: 1
      Name: "developers"
  portainer.TeamAccessPolicies:
    type: "object"
    additionalProperties:
      $ref: "#/definitions/portainer.AccessPolicy"
  portainer.TeamMembership:
    type: "object"
    properties:
      Id:
        type: "integer"
        example: 1
        description: "Membership Identifier"
      Role:
        type: "integer"
        example: 1
        description: "Team role (1 for team leader and 2 for team member)"
      TeamID:
        type: "integer"
        example: 1
        description: "Team identifier"
      UserID:
        type: "integer"
        example: 1
        description: "User identifier"
    example:
      Role: 1
      UserID: 1
      Id: 1
      TeamID: 1
  portainer.TeamResourceAccess:
    type: "object"
    properties:
      AccessLevel:
        type: "integer"
      TeamId:
        type: "integer"
    example:
      TeamId: 5
      AccessLevel: 1
  portainer.Template:
    type: "object"
    properties:
      Id:
        type: "integer"
        example: 1
        description: "Mandatory container/stack fields\nTemplate Identifier"
      administrator_only:
        type: "boolean"
        example: true
        description: "Whether the template should be available to administrators only"
      categories:
        type: "array"
        example:
        - "database"
        description: "A list of categories associated to the template"
        items:
          type: "string"
      command:
        type: "string"
        example: "ls -lah"
        description: "The command that will be executed in a container template"
      description:
        type: "string"
        example: "High performance web server"
        description: "Description of the template"
      env:
        type: "array"
        description: "A list of environment(endpoint) variables used during the template\
          \ deployment"
        items:
          $ref: "#/definitions/portainer.TemplateEnv"
      hostname:
        type: "string"
        example: "mycontainer"
        description: "Container hostname"
      image:
        type: "string"
        example: "nginx:latest"
        description: "Mandatory container fields\nImage associated to a container\
          \ template. Mandatory for a container template"
      interactive:
        type: "boolean"
        example: true
        description: "Whether the container should be started in\ninteractive mode\
          \ (-i -t equivalent on the CLI)"
      labels:
        type: "array"
        description: "Container labels"
        items:
          $ref: "#/definitions/portainer.Pair"
      logo:
        type: "string"
        example: "https://cloudinovasi.id/assets/img/logos/nginx.png"
        description: "URL of the template's logo"
      name:
        type: "string"
        example: "mystackname"
        description: "Optional stack/container fields\nDefault name for the stack/container\
          \ to be used on deployment"
      network:
        type: "string"
        example: "mynet"
        description: "Name of a network that will be used on container deployment\
          \ if it exists inside the environment(endpoint)"
      note:
        type: "string"
        example: "This is my <b>custom</b> template"
        description: "A note that will be displayed in the UI. Supports HTML content"
      platform:
        type: "string"
        example: "linux"
        description: "Platform associated to the template.\nValid values are: 'linux',\
          \ 'windows' or leave empty for multi-platform"
      ports:
        type: "array"
        example:
        - "8080:80/tcp"
        description: "A list of ports exposed by the container"
        items:
          type: "string"
      privileged:
        type: "boolean"
        example: true
        description: "Whether the container should be started in privileged mode"
      registry:
        type: "string"
        example: "quay.io"
        description: "Optional container fields\nThe URL of a registry associated\
          \ to the image for a container template"
      repository:
        description: "Mandatory stack fields"
        $ref: "#/definitions/portainer.TemplateRepository"
      restart_policy:
        type: "string"
        example: "on-failure"
        description: "Container restart policy"
      stackFile:
        type: "string"
        description: "Mandatory Edge stack fields\nStack file used for this template"
      title:
        type: "string"
        example: "Nginx"
        description: "Title of the template"
      type:
        type: "integer"
        example: 1
        description: "Template type. Valid values are: 1 (container), 2 (Swarm stack)\
          \ or 3 (Compose stack)"
      volumes:
        type: "array"
        description: "A list of volumes used during the container template deployment"
        items:
          $ref: "#/definitions/portainer.TemplateVolume"
    example:
      image: "nginx:latest"
      note: "This is my <b>custom</b> template"
      registry: "quay.io"
      interactive: true
      volumes:
      - container: "/data"
        bind: "/tmp"
        readonly: true
      - container: "/data"
        bind: "/tmp"
        readonly: true
      description: "High performance web server"
      env:
      - default: "default_value"
        select:
        - default: false
          text: "text value"
          value: "value"
        - default: false
          text: "text value"
          value: "value"
        name: "MYSQL_ROOT_PASSWORD"
        description: "MySQL root account password"
        label: "Root password"
        preset: false
      - default: "default_value"
        select:
        - default: false
          text: "text value"
          value: "value"
        - default: false
          text: "text value"
          value: "value"
        name: "MYSQL_ROOT_PASSWORD"
        description: "MySQL root account password"
        label: "Root password"
        preset: false
      ports:
      - "8080:80/tcp"
      repository:
        stackfile: "./subfolder/docker-compose.yml"
        url: "https://github.com/portainer/portainer-compose"
      title: "Nginx"
      type: 1
      command: "ls -lah"
      platform: "linux"
      labels:
      - name: "name"
        value: "value"
      - name: "name"
        value: "value"
      network: "mynet"
      privileged: true
      hostname: "mycontainer"
      stackFile: "stackFile"
      restart_policy: "on-failure"
      administrator_only: true
      name: "mystackname"
      logo: "https://cloudinovasi.id/assets/img/logos/nginx.png"
      Id: 1
      categories:
      - "database"
  portainer.TemplateEnv:
    type: "object"
    properties:
      default:
        type: "string"
        example: "default_value"
        description: "Default value that will be set for the variable"
      description:
        type: "string"
        example: "MySQL root account password"
        description: "Content of the tooltip that will be generated in the UI"
      label:
        type: "string"
        example: "Root password"
        description: "Text for the label that will be generated in the UI"
      name:
        type: "string"
        example: "MYSQL_ROOT_PASSWORD"
        description: "name of the environment(endpoint) variable"
      preset:
        type: "boolean"
        example: false
        description: "If set to true, will not generate any input for this variable\
          \ in the UI"
      select:
        type: "array"
        description: "A list of name/value that will be used to generate a dropdown\
          \ in the UI"
        items:
          $ref: "#/definitions/portainer.TemplateEnvSelect"
    example:
      default: "default_value"
      select:
      - default: false
        text: "text value"
        value: "value"
      - default: false
        text: "text value"
        value: "value"
      name: "MYSQL_ROOT_PASSWORD"
      description: "MySQL root account password"
      label: "Root password"
      preset: false
  portainer.TemplateEnvSelect:
    type: "object"
    properties:
      default:
        type: "boolean"
        example: false
        description: "Will set this choice as the default choice"
      text:
        type: "string"
        example: "text value"
        description: "Some text that will displayed as a choice"
      value:
        type: "string"
        example: "value"
        description: "A value that will be associated to the choice"
    example:
      default: false
      text: "text value"
      value: "value"
  portainer.TemplateRepository:
    type: "object"
    properties:
      stackfile:
        type: "string"
        example: "./subfolder/docker-compose.yml"
        description: "Path to the stack file inside the git repository"
      url:
        type: "string"
        example: "https://github.com/portainer/portainer-compose"
        description: "URL of a git repository used to deploy a stack template. Mandatory\
          \ for a Swarm/Compose stack template"
    example:
      stackfile: "./subfolder/docker-compose.yml"
      url: "https://github.com/portainer/portainer-compose"
  portainer.TemplateVolume:
    type: "object"
    properties:
      bind:
        type: "string"
        example: "/tmp"
        description: "Path on the host"
      container:
        type: "string"
        example: "/data"
        description: "Path inside the container"
      readonly:
        type: "boolean"
        example: true
        description: "Whether the volume used should be readonly"
    example:
      container: "/data"
      bind: "/tmp"
      readonly: true
  portainer.User:
    type: "object"
    properties:
      Id:
        type: "integer"
        example: 1
        description: "User Identifier"
      Role:
        type: "integer"
        example: 1
        description: "User role (1 for administrator account and 2 for regular account)"
      TokenIssueAt:
        type: "integer"
        example: 1
      Username:
        type: "string"
        example: "bob"
      endpointAuthorizations:
        description: "Deprecated in DBVersion == 25"
        $ref: "#/definitions/portainer.EndpointAuthorizations"
      portainerAuthorizations:
        description: "Deprecated in DBVersion == 25"
        $ref: "#/definitions/portainer.Authorizations"
      themeSettings:
        $ref: "#/definitions/portainer.UserThemeSettings"
      userTheme:
        type: "string"
        example: "dark"
        description: "Deprecated"
    example:
      Role: 1
      endpointAuthorizations: {}
      portainerAuthorizations: {}
      userTheme: "dark"
      TokenIssueAt: 1
      Username: "bob"
      themeSettings:
        color: "dark"
        subtleUpgradeButton: true
      Id: 1
  portainer.UserAccessPolicies:
    type: "object"
    additionalProperties:
      $ref: "#/definitions/portainer.AccessPolicy"
  portainer.UserResourceAccess:
    type: "object"
    properties:
      AccessLevel:
        type: "integer"
      UserId:
        type: "integer"
    example:
      UserId: 2
      AccessLevel: 5
  portainer.UserThemeSettings:
    type: "object"
    properties:
      color:
        type: "string"
        example: "dark"
        description: "Color represents the color theme of the UI"
        enum:
        - "dark"
        - "light"
        - "highcontrast"
        - "auto"
      subtleUpgradeButton:
        type: "boolean"
        description: "SubtleUpgradeButton indicates if the upgrade banner should be\
          \ displayed in a subtle way"
    example:
      color: "dark"
      subtleUpgradeButton: true
  portainer.Webhook:
    type: "object"
    properties:
      EndpointId:
        type: "integer"
      Id:
        type: "integer"
        example: 1
        description: "Webhook Identifier"
      RegistryId:
        type: "integer"
      ResourceId:
        type: "string"
      Token:
        type: "string"
      Type:
        type: "integer"
    example:
      Type: 1
      ResourceId: "ResourceId"
      EndpointId: 0
      RegistryId: 6
      Token: "Token"
      Id: 1
  registries.registryConfigurePayload:
    type: "object"
    required:
    - "authentication"
    properties:
      authentication:
        type: "boolean"
        example: false
        description: "Is authentication against this registry enabled"
      password:
        type: "string"
        example: "registry_password"
        description: "Password used to authenticate against this registry. required\
          \ when Authentication is true"
      region:
        type: "string"
        description: "ECR region"
      tls:
        type: "boolean"
        example: true
        description: "Use TLS"
      tlscacertFile:
        type: "array"
        description: "The TLS CA certificate file"
        items:
          type: "integer"
      tlscertFile:
        type: "array"
        description: "The TLS client certificate file"
        items:
          type: "integer"
      tlskeyFile:
        type: "array"
        description: "The TLS client key file"
        items:
          type: "integer"
      tlsskipVerify:
        type: "boolean"
        example: false
        description: "Skip the verification of the server TLS certificate"
      username:
        type: "string"
        example: "registry_user"
        description: "Username used to authenticate against this registry. Required\
          \ when Authentication is true"
  registries.registryCreatePayload:
    type: "object"
    required:
    - "authentication"
    - "name"
    - "type"
    - "url"
    properties:
      authentication:
        type: "boolean"
        example: false
        description: "Is authentication against this registry enabled"
      baseURL:
        type: "string"
        example: "registry.mydomain.tld:2375"
        description: "BaseURL required for ProGet registry"
      ecr:
        description: "ECR specific details, required when type = 7"
        $ref: "#/definitions/portainer.EcrData"
      gitlab:
        description: "Gitlab specific details, required when type = 4"
        $ref: "#/definitions/portainer.GitlabRegistryData"
      name:
        type: "string"
        example: "my-registry"
        description: "Name that will be used to identify this registry"
      password:
        type: "string"
        example: "registry_password"
        description: "Password used to authenticate against this registry. required\
          \ when Authentication is true"
      quay:
        description: "Quay specific details, required when type = 1"
        $ref: "#/definitions/portainer.QuayRegistryData"
      type:
        type: "integer"
        example: 1
        description: "Registry Type. Valid values are:\n\t1 (Quay.io),\n\t2 (Azure\
          \ container registry),\n\t3 (custom registry),\n\t4 (Gitlab registry),\n\
          \t5 (ProGet registry),\n\t6 (DockerHub)\n\t7 (ECR)"
      url:
        type: "string"
        example: "registry.mydomain.tld:2375/feed"
        description: "URL or IP address of the Docker registry"
      username:
        type: "string"
        example: "registry_user"
        description: "Username used to authenticate against this registry. Required\
          \ when Authentication is true"
  registries.registryUpdatePayload:
    type: "object"
    required:
    - "authentication"
    - "name"
    - "url"
    properties:
      authentication:
        type: "boolean"
        example: false
        description: "Is authentication against this registry enabled"
      baseURL:
        type: "string"
        example: "registry.mydomain.tld:2375"
        description: "BaseURL is used for quay registry"
      ecr:
        description: "ECR data"
        $ref: "#/definitions/portainer.EcrData"
      name:
        type: "string"
        example: "my-registry"
        description: "Name that will be used to identify this registry"
      password:
        type: "string"
        example: "registry_password"
        description: "Password used to authenticate against this registry. required\
          \ when Authentication is true"
      quay:
        description: "Quay data"
        $ref: "#/definitions/portainer.QuayRegistryData"
      registryAccesses:
        description: "Registry access control"
        $ref: "#/definitions/portainer.RegistryAccesses"
      url:
        type: "string"
        example: "registry.mydomain.tld:2375"
        description: "URL or IP address of the Docker registry"
      username:
        type: "string"
        example: "registry_user"
        description: "Username used to authenticate against this registry. Required\
          \ when Authentication is true"
  release.Chart:
    type: "object"
    properties:
      files:
        type: "array"
        description: "Files are miscellaneous files in a chart archive,\ne.g. README,\
          \ LICENSE, etc."
        items:
          $ref: "#/definitions/release.File"
      lock:
        description: "Lock is the contents of Chart.lock."
        $ref: "#/definitions/release.Lock"
      metadata:
        description: "Metadata is the contents of the Chartfile."
        $ref: "#/definitions/release.Metadata"
      schema:
        type: "array"
        description: "Schema is an optional JSON schema for imposing structure on\
          \ Values"
        items:
          type: "integer"
      templates:
        type: "array"
        description: "Templates for this chart."
        items:
          $ref: "#/definitions/release.File"
      values:
        type: "object"
        description: "Values are default config for this chart."
        additionalProperties: true
    example:
      schema:
      - 6
      - 6
      metadata:
        maintainers:
        - name: "name"
          email: "email"
          url: "url"
        - name: "name"
          email: "email"
          url: "url"
        appVersion: "appVersion"
        keywords:
        - "keywords"
        - "keywords"
        sources:
        - "sources"
        - "sources"
        deprecated: true
        icon: "icon"
        annotations:
          key: "annotations"
        description: "description"
        type: "type"
        version: "version"
        dependencies:
        - condition: "condition"
          name: "name"
          alias: "alias"
          repository: "repository"
          import-values:
          - ""
          - ""
          version: "version"
          enabled: true
          tags:
          - "tags"
          - "tags"
        - condition: "condition"
          name: "name"
          alias: "alias"
          repository: "repository"
          import-values:
          - ""
          - ""
          version: "version"
          enabled: true
          tags:
          - "tags"
          - "tags"
        home: "home"
        tags: "tags"
        condition: "condition"
        apiVersion: "apiVersion"
        kubeVersion: "kubeVersion"
        name: "name"
      templates:
      - data:
        - 0
        - 0
        name: "name"
      - data:
        - 0
        - 0
        name: "name"
      values:
        key: ""
      files:
      - data:
        - 0
        - 0
        name: "name"
      - data:
        - 0
        - 0
        name: "name"
      lock:
        generated: "generated"
        digest: "digest"
        dependencies:
        - condition: "condition"
          name: "name"
          alias: "alias"
          repository: "repository"
          import-values:
          - ""
          - ""
          version: "version"
          enabled: true
          tags:
          - "tags"
          - "tags"
        - condition: "condition"
          name: "name"
          alias: "alias"
          repository: "repository"
          import-values:
          - ""
          - ""
          version: "version"
          enabled: true
          tags:
          - "tags"
          - "tags"
  release.Dependency:
    type: "object"
    properties:
      alias:
        type: "string"
        description: "Alias usable alias to be used for the chart"
      condition:
        type: "string"
        description: "A yaml path that resolves to a boolean, used for enabling/disabling\
          \ charts (e.g. subchart1.enabled )"
      enabled:
        type: "boolean"
        description: "Enabled bool determines if chart should be loaded"
      import-values:
        type: "array"
        description: "ImportValues holds the mapping of source values to parent key\
          \ to be imported. Each item can be a\nstring or pair of child/parent sublist\
          \ items."
        items: {}
      name:
        type: "string"
        description: "Name is the name of the dependency.\n\nThis must mach the name\
          \ in the dependency's Chart.yaml."
      repository:
        type: "string"
        description: "The URL to the repository.\n\nAppending `index.yaml` to this\
          \ string should result in a URL that can be\nused to fetch the repository\
          \ index."
      tags:
        type: "array"
        description: "Tags can be used to group charts for enabling/disabling together"
        items:
          type: "string"
      version:
        type: "string"
        description: "Version is the version (range) of this chart.\n\nA lock file\
          \ will always produce a single version, while a dependency\nmay contain\
          \ a semantic version range."
    example:
      condition: "condition"
      name: "name"
      alias: "alias"
      repository: "repository"
      import-values:
      - ""
      - ""
      version: "version"
      enabled: true
      tags:
      - "tags"
      - "tags"
  release.File:
    type: "object"
    properties:
      data:
        type: "array"
        description: "Data is the template as byte data."
        items:
          type: "integer"
      name:
        type: "string"
        description: "Name is the path-like name of the template."
    example:
      data:
      - 0
      - 0
      name: "name"
  release.Hook:
    type: "object"
    properties:
      delete_policies:
        type: "array"
        description: "DeletePolicies are the policies that indicate when to delete\
          \ the hook"
        items:
          type: "string"
      events:
        type: "array"
        description: "Events are the events that this hook fires on."
        items:
          type: "string"
      kind:
        type: "string"
        description: "Kind is the Kubernetes kind."
      last_run:
        description: "LastRun indicates the date/time this was last run."
        $ref: "#/definitions/release.HookExecution"
      manifest:
        type: "string"
        description: "Manifest is the manifest contents."
      name:
        type: "string"
      path:
        type: "string"
        description: "Path is the chart-relative path to the template."
      weight:
        type: "integer"
        description: "Weight indicates the sort order for execution among similar\
          \ Hook type"
    example:
      path: "path"
      kind: "kind"
      manifest: "manifest"
      name: "name"
      weight: 1
      last_run:
        phase: "phase"
        completed_at: "completed_at"
        started_at: "started_at"
      events:
      - "events"
      - "events"
      delete_policies:
      - "delete_policies"
      - "delete_policies"
  release.HookExecution:
    type: "object"
    properties:
      completed_at:
        type: "string"
        description: "CompletedAt indicates the date/time this hook was completed."
      phase:
        type: "string"
        description: "Phase indicates whether the hook completed successfully"
      started_at:
        type: "string"
        description: "StartedAt indicates the date/time this hook was started"
    example:
      phase: "phase"
      completed_at: "completed_at"
      started_at: "started_at"
  release.Lock:
    type: "object"
    properties:
      dependencies:
        type: "array"
        description: "Dependencies is the list of dependencies that this lock file\
          \ has locked."
        items:
          $ref: "#/definitions/release.Dependency"
      digest:
        type: "string"
        description: "Digest is a hash of the dependencies in Chart.yaml."
      generated:
        type: "string"
        description: "Generated is the date the lock file was last generated."
    example:
      generated: "generated"
      digest: "digest"
      dependencies:
      - condition: "condition"
        name: "name"
        alias: "alias"
        repository: "repository"
        import-values:
        - ""
        - ""
        version: "version"
        enabled: true
        tags:
        - "tags"
        - "tags"
      - condition: "condition"
        name: "name"
        alias: "alias"
        repository: "repository"
        import-values:
        - ""
        - ""
        version: "version"
        enabled: true
        tags:
        - "tags"
        - "tags"
  release.Maintainer:
    type: "object"
    properties:
      email:
        type: "string"
        description: "Email is an optional email address to contact the named maintainer"
      name:
        type: "string"
        description: "Name is a user name or organization name"
      url:
        type: "string"
        description: "URL is an optional URL to an address for the named maintainer"
    example:
      name: "name"
      email: "email"
      url: "url"
  release.Metadata:
    type: "object"
    properties:
      annotations:
        type: "object"
        description: "Annotations are additional mappings uninterpreted by Helm,\n\
          made available for inspection by other applications."
        additionalProperties:
          type: "string"
      apiVersion:
        type: "string"
        description: "The API Version of this chart. Required."
      appVersion:
        type: "string"
        description: "The version of the application enclosed inside of this chart."
      condition:
        type: "string"
        description: "The condition to check to enable chart"
      dependencies:
        type: "array"
        description: "Dependencies are a list of dependencies for a chart."
        items:
          $ref: "#/definitions/release.Dependency"
      deprecated:
        type: "boolean"
        description: "Whether or not this chart is deprecated"
      description:
        type: "string"
        description: "A one-sentence description of the chart"
      home:
        type: "string"
        description: "The URL to a relevant project page, git repo, or contact person"
      icon:
        type: "string"
        description: "The URL to an icon file."
      keywords:
        type: "array"
        description: "A list of string keywords"
        items:
          type: "string"
      kubeVersion:
        type: "string"
        description: "KubeVersion is a SemVer constraint specifying the version of\
          \ Kubernetes required."
      maintainers:
        type: "array"
        description: "A list of name and URL/email address combinations for the maintainer(s)"
        items:
          $ref: "#/definitions/release.Maintainer"
      name:
        type: "string"
        description: "The name of the chart. Required."
      sources:
        type: "array"
        description: "Source is the URL to the source code of this chart"
        items:
          type: "string"
      tags:
        type: "string"
        description: "The tags to check to enable chart"
      type:
        type: "string"
        description: "Specifies the chart type: application or library"
      version:
        type: "string"
        description: "A SemVer 2 conformant version string of the chart. Required."
    example:
      maintainers:
      - name: "name"
        email: "email"
        url: "url"
      - name: "name"
        email: "email"
        url: "url"
      appVersion: "appVersion"
      keywords:
      - "keywords"
      - "keywords"
      sources:
      - "sources"
      - "sources"
      deprecated: true
      icon: "icon"
      annotations:
        key: "annotations"
      description: "description"
      type: "type"
      version: "version"
      dependencies:
      - condition: "condition"
        name: "name"
        alias: "alias"
        repository: "repository"
        import-values:
        - ""
        - ""
        version: "version"
        enabled: true
        tags:
        - "tags"
        - "tags"
      - condition: "condition"
        name: "name"
        alias: "alias"
        repository: "repository"
        import-values:
        - ""
        - ""
        version: "version"
        enabled: true
        tags:
        - "tags"
        - "tags"
      home: "home"
      tags: "tags"
      condition: "condition"
      apiVersion: "apiVersion"
      kubeVersion: "kubeVersion"
      name: "name"
  release.Release:
    type: "object"
    properties:
      chart:
        description: "Info provides information about a release\nInfo *Info `json:\"\
          info,omitempty\"`\nChart is the chart that was released."
        $ref: "#/definitions/release.Chart"
      config:
        type: "object"
        description: "Config is the set of extra Values added to the chart.\nThese\
          \ values override the default values inside of the chart."
        additionalProperties: true
      hooks:
        type: "array"
        description: "Hooks are all of the hooks declared for this release."
        items:
          $ref: "#/definitions/release.Hook"
      manifest:
        type: "string"
        description: "Manifest is the string representation of the rendered template."
      name:
        type: "string"
        description: "Name is the name of the release"
      namespace:
        type: "string"
        description: "Namespace is the kubernetes namespace of the release."
      version:
        type: "integer"
        description: "Version is an int which represents the revision of the release."
    example:
      manifest: "manifest"
      name: "name"
      namespace: "namespace"
      chart:
        schema:
        - 6
        - 6
        metadata:
          maintainers:
          - name: "name"
            email: "email"
            url: "url"
          - name: "name"
            email: "email"
            url: "url"
          appVersion: "appVersion"
          keywords:
          - "keywords"
          - "keywords"
          sources:
          - "sources"
          - "sources"
          deprecated: true
          icon: "icon"
          annotations:
            key: "annotations"
          description: "description"
          type: "type"
          version: "version"
          dependencies:
          - condition: "condition"
            name: "name"
            alias: "alias"
            repository: "repository"
            import-values:
            - ""
            - ""
            version: "version"
            enabled: true
            tags:
            - "tags"
            - "tags"
          - condition: "condition"
            name: "name"
            alias: "alias"
            repository: "repository"
            import-values:
            - ""
            - ""
            version: "version"
            enabled: true
            tags:
            - "tags"
            - "tags"
          home: "home"
          tags: "tags"
          condition: "condition"
          apiVersion: "apiVersion"
          kubeVersion: "kubeVersion"
          name: "name"
        templates:
        - data:
          - 0
          - 0
          name: "name"
        - data:
          - 0
          - 0
          name: "name"
        values:
          key: ""
        files:
        - data:
          - 0
          - 0
          name: "name"
        - data:
          - 0
          - 0
          name: "name"
        lock:
          generated: "generated"
          digest: "digest"
          dependencies:
          - condition: "condition"
            name: "name"
            alias: "alias"
            repository: "repository"
            import-values:
            - ""
            - ""
            version: "version"
            enabled: true
            tags:
            - "tags"
            - "tags"
          - condition: "condition"
            name: "name"
            alias: "alias"
            repository: "repository"
            import-values:
            - ""
            - ""
            version: "version"
            enabled: true
            tags:
            - "tags"
            - "tags"
      config:
        key: ""
      hooks:
      - path: "path"
        kind: "kind"
        manifest: "manifest"
        name: "name"
        weight: 1
        last_run:
          phase: "phase"
          completed_at: "completed_at"
          started_at: "started_at"
        events:
        - "events"
        - "events"
        delete_policies:
        - "delete_policies"
        - "delete_policies"
      - path: "path"
        kind: "kind"
        manifest: "manifest"
        name: "name"
        weight: 1
        last_run:
          phase: "phase"
          completed_at: "completed_at"
          started_at: "started_at"
        events:
        - "events"
        - "events"
        delete_policies:
        - "delete_policies"
        - "delete_policies"
      version: 5
  release.ReleaseElement:
    type: "object"
    properties:
      app_version:
        type: "string"
      chart:
        type: "string"
      name:
        type: "string"
      namespace:
        type: "string"
      revision:
        type: "string"
      status:
        type: "string"
      updated:
        type: "string"
    example:
      app_version: "app_version"
      name: "name"
      namespace: "namespace"
      chart: "chart"
      updated: "updated"
      revision: "revision"
      status: "status"
  resourcecontrols.resourceControlCreatePayload:
    type: "object"
    required:
    - "resourceID"
    - "type"
    properties:
      administratorsOnly:
        type: "boolean"
        example: true
        description: "Permit access to resource only to admins"
      public:
        type: "boolean"
        example: true
        description: "Permit access to the associated resource to any user"
      resourceID:
        type: "string"
        example: "617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08"
      subResourceIDs:
        type: "array"
        example:
        - "617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08"
        description: "List of Docker resources that will inherit this access control"
        items:
          type: "string"
      teams:
        type: "array"
        example:
        - 56
        - 7
        description: "List of team identifiers with access to the associated resource"
        items:
          type: "integer"
      type:
        type: "integer"
        example: 1
        description: "Type of Resource. Valid values are: 1 - container, 2 - service\n\
          3 - volume, 4 - network, 5 - secret, 6 - stack, 7 - config, 8 - custom template,\
          \ 9 - azure-container-group"
      users:
        type: "array"
        example:
        - 1
        - 4
        description: "List of user identifiers with access to the associated resource"
        items:
          type: "integer"
  resourcecontrols.resourceControlUpdatePayload:
    type: "object"
    properties:
      administratorsOnly:
        type: "boolean"
        example: true
        description: "Permit access to resource only to admins"
      public:
        type: "boolean"
        example: true
        description: "Permit access to the associated resource to any user"
      teams:
        type: "array"
        example:
        - 7
        description: "List of team identifiers with access to the associated resource"
        items:
          type: "integer"
      users:
        type: "array"
        example:
        - 4
        description: "List of user identifiers with access to the associated resource"
        items:
          type: "integer"
  settings.publicSettingsResponse:
    type: "object"
    properties:
      AuthenticationMethod:
        type: "integer"
        example: 1
        description: "Active authentication method for the Portainer instance. Valid\
          \ values are: 1 for internal, 2 for LDAP, or 3 for oauth"
      EnableEdgeComputeFeatures:
        type: "boolean"
        example: true
        description: "Whether edge compute features are enabled"
      EnableTelemetry:
        type: "boolean"
        example: true
        description: "Whether telemetry is enabled"
      Features:
        type: "object"
        description: "Supported feature flags"
        additionalProperties:
          type: "boolean"
      LogoURL:
        type: "string"
        example: "https://mycompany.mydomain.tld/logo.png"
        description: "URL to a logo that will be displayed on the login page as well\
          \ as on top of the sidebar. Will use default Portainer logo when value is\
          \ empty string"
      OAuthLoginURI:
        type: "string"
        example: "https://gitlab.com/oauth"
        description: "The URL used for oauth login"
      OAuthLogoutURI:
        type: "string"
        example: "https://gitlab.com/oauth/logout"
        description: "The URL used for oauth logout"
      RequiredPasswordLength:
        type: "integer"
        example: 1
        description: "The minimum required length for a password of any user when\
          \ using internal auth mode"
      ShowKomposeBuildOption:
        type: "boolean"
        example: false
        description: "Show the Kompose build option (discontinued in 2.18)"
      TeamSync:
        type: "boolean"
        example: true
        description: "Whether team sync is enabled"
      edge:
        $ref: "settings.publicSettingsResponse_edge"
      isAMTEnabled:
        type: "boolean"
        description: "Whether AMT is enabled"
      isFDOEnabled:
        type: "boolean"
        description: "Whether FDO is enabled"
      kubeconfigExpiry:
        type: "string"
        example: "24h"
        description: "The expiry of a Kubeconfig"
        default: "0"
    example:
      LogoURL: "https://mycompany.mydomain.tld/logo.png"
      OAuthLogoutURI: "https://gitlab.com/oauth/logout"
      ShowKomposeBuildOption: false
      AuthenticationMethod: 1
      RequiredPasswordLength: 1
      kubeconfigExpiry: "24h"
      edge:
        CommandInterval: 60
        SnapshotInterval: 60
        checkinInterval: 60
        PingInterval: 60
        asyncMode: true
      OAuthLoginURI: "https://gitlab.com/oauth"
      EnableTelemetry: true
      Features:
        key: true
      isFDOEnabled: true
      EnableEdgeComputeFeatures: true
      isAMTEnabled: true
      TeamSync: true
  settings.settingsUpdatePayload:
    type: "object"
    properties:
      EdgePortainerURL:
        type: "string"
        description: "EdgePortainerURL is the URL that is exposed to edge agents"
      ShowKomposeBuildOption:
        type: "boolean"
        example: false
        description: "Show the Kompose build option (discontinued in 2.18)"
      authenticationMethod:
        type: "integer"
        example: 1
        description: "Active authentication method for the Portainer instance. Valid\
          \ values are: 1 for internal, 2 for LDAP, or 3 for oauth"
      blackListedLabels:
        type: "array"
        description: "A list of label name & value that will be used to hide containers\
          \ when querying containers"
        items:
          $ref: "#/definitions/portainer.Pair"
      edgeAgentCheckinInterval:
        type: "integer"
        example: 5
        description: "The default check in interval for edge agent (in seconds)"
      enableEdgeComputeFeatures:
        type: "boolean"
        example: true
        description: "Whether edge compute features are enabled"
      enableTelemetry:
        type: "boolean"
        example: false
        description: "Whether telemetry is enabled"
      enforceEdgeID:
        type: "boolean"
        example: false
        description: "EnforceEdgeID makes Portainer store the Edge ID instead of accepting\
          \ anyone"
      helmRepositoryURL:
        type: "string"
        example: "https://charts.bitnami.com/bitnami"
        description: "Helm repository URL"
      internalAuthSettings:
        $ref: "#/definitions/portainer.InternalAuthSettings"
      kubeconfigExpiry:
        type: "string"
        example: "24h"
        description: "The expiry of a Kubeconfig"
        default: "0"
      kubectlShellImage:
        type: "string"
        example: "portainer/kubectl-shell:latest"
        description: "Kubectl Shell Image"
      ldapsettings:
        $ref: "#/definitions/portainer.LDAPSettings"
      logoURL:
        type: "string"
        example: "https://mycompany.mydomain.tld/logo.png"
        description: "URL to a logo that will be displayed on the login page as well\
          \ as on top of the sidebar. Will use default Portainer logo when value is\
          \ empty string"
      oauthSettings:
        $ref: "#/definitions/portainer.OAuthSettings"
      snapshotInterval:
        type: "string"
        example: "5m"
        description: "The interval in which environment(endpoint) snapshots are created"
      templatesURL:
        type: "string"
        example: "https://raw.githubusercontent.com/portainer/templates/master/templates.json"
        description: "URL to the templates that will be displayed in the UI when navigating\
          \ to App Templates"
      trustOnFirstConnect:
        type: "boolean"
        example: false
        description: "TrustOnFirstConnect makes Portainer accepting edge agent connection\
          \ by default"
      userSessionTimeout:
        type: "string"
        example: "5m"
        description: "The duration of a user session"
  ssl.sslUpdatePayload:
    type: "object"
    properties:
      cert:
        type: "string"
      httpenabled:
        type: "boolean"
      key:
        type: "string"
  stacks.composeStackFromFileContentPayload:
    type: "object"
    required:
    - "name"
    - "stackFileContent"
    properties:
      env:
        type: "array"
        description: "A list of environment(endpoint) variables used during stack\
          \ deployment"
        items:
          $ref: "#/definitions/portainer.Pair"
      fromAppTemplate:
        type: "boolean"
        example: false
        description: "Whether the stack is from a app template"
      name:
        type: "string"
        example: "myStack"
        description: "Name of the stack"
      stackFileContent:
        type: "string"
        example: "version: 3\n services:\n web:\n image:nginx"
        description: "Content of the Stack file"
  stacks.composeStackFromGitRepositoryPayload:
    type: "object"
    required:
    - "name"
    - "repositoryURL"
    properties:
      additionalFiles:
        type: "array"
        example:
        - "[nz.compose.yml"
        - " uat.compose.yml]"
        description: "Applicable when deploying with multiple stack files"
        items:
          type: "string"
      autoUpdate:
        description: "Optional auto update configuration"
        $ref: "#/definitions/portainer.StackAutoUpdate"
      composeFile:
        type: "string"
        example: "docker-compose.yml"
        description: "Path to the Stack file inside the Git repository"
        default: "docker-compose.yml"
      env:
        type: "array"
        description: "A list of environment(endpoint) variables used during stack\
          \ deployment"
        items:
          $ref: "#/definitions/portainer.Pair"
      fromAppTemplate:
        type: "boolean"
        example: false
        description: "Whether the stack is from a app template"
      name:
        type: "string"
        example: "myStack"
        description: "Name of the stack"
      repositoryAuthentication:
        type: "boolean"
        example: true
        description: "Use basic authentication to clone the Git repository"
      repositoryPassword:
        type: "string"
        example: "myGitPassword"
        description: "Password used in basic authentication. Required when RepositoryAuthentication\
          \ is true."
      repositoryReferenceName:
        type: "string"
        example: "refs/heads/master"
        description: "Reference name of a Git repository hosting the Stack file"
      repositoryURL:
        type: "string"
        example: "https://github.com/openfaas/faas"
        description: "URL of a Git repository hosting the Stack file"
      repositoryUsername:
        type: "string"
        example: "myGitUsername"
        description: "Username used in basic authentication. Required when RepositoryAuthentication\
          \ is true."
  stacks.kubernetesGitDeploymentPayload:
    type: "object"
    properties:
      additionalFiles:
        type: "array"
        items:
          type: "string"
      autoUpdate:
        $ref: "#/definitions/portainer.StackAutoUpdate"
      composeFormat:
        type: "boolean"
      manifestFile:
        type: "string"
      namespace:
        type: "string"
      repositoryAuthentication:
        type: "boolean"
      repositoryPassword:
        type: "string"
      repositoryReferenceName:
        type: "string"
      repositoryURL:
        type: "string"
      repositoryUsername:
        type: "string"
      stackName:
        type: "string"
  stacks.kubernetesManifestURLDeploymentPayload:
    type: "object"
    properties:
      composeFormat:
        type: "boolean"
      manifestURL:
        type: "string"
      namespace:
        type: "string"
      stackName:
        type: "string"
  stacks.kubernetesStringDeploymentPayload:
    type: "object"
    properties:
      composeFormat:
        type: "boolean"
      namespace:
        type: "string"
      stackFileContent:
        type: "string"
      stackName:
        type: "string"
  stacks.stackFileResponse:
    type: "object"
    properties:
      StackFileContent:
        type: "string"
        example: "version: 3\n services:\n web:\n image:nginx"
        description: "Content of the Stack file"
    example:
      StackFileContent: "version: 3\n services:\n web:\n image:nginx"
  stacks.stackGitRedployPayload:
    type: "object"
    properties:
      env:
        type: "array"
        items:
          $ref: "#/definitions/portainer.Pair"
      prune:
        type: "boolean"
      pullImage:
        type: "boolean"
        example: false
        description: "Force a pulling to current image with the original tag though\
          \ the image is already the latest"
      repositoryAuthentication:
        type: "boolean"
      repositoryPassword:
        type: "string"
      repositoryReferenceName:
        type: "string"
      repositoryUsername:
        type: "string"
  stacks.stackGitUpdatePayload:
    type: "object"
    properties:
      autoUpdate:
        $ref: "#/definitions/portainer.StackAutoUpdate"
      env:
        type: "array"
        items:
          $ref: "#/definitions/portainer.Pair"
      prune:
        type: "boolean"
      repositoryAuthentication:
        type: "boolean"
      repositoryPassword:
        type: "string"
      repositoryReferenceName:
        type: "string"
      repositoryUsername:
        type: "string"
  stacks.stackMigratePayload:
    type: "object"
    required:
    - "endpointID"
    properties:
      endpointID:
        type: "integer"
        example: 2
        description: "Environment(Endpoint) identifier of the target environment(endpoint)\
          \ where the stack will be relocated"
      name:
        type: "string"
        example: "new-stack"
        description: "If provided will rename the migrated stack"
      swarmID:
        type: "string"
        example: "jpofkc0i9uo9wtx1zesuk649w"
        description: "Swarm cluster identifier, must match the identifier of the cluster\
          \ where the stack will be relocated"
  stacks.swarmStackFromFileContentPayload:
    type: "object"
    required:
    - "name"
    - "stackFileContent"
    - "swarmID"
    properties:
      env:
        type: "array"
        description: "A list of environment(endpoint) variables used during stack\
          \ deployment"
        items:
          $ref: "#/definitions/portainer.Pair"
      fromAppTemplate:
        type: "boolean"
        example: false
        description: "Whether the stack is from a app template"
      name:
        type: "string"
        example: "myStack"
        description: "Name of the stack"
      stackFileContent:
        type: "string"
        example: "version: 3\n services:\n web:\n image:nginx"
        description: "Content of the Stack file"
      swarmID:
        type: "string"
        example: "jpofkc0i9uo9wtx1zesuk649w"
        description: "Swarm cluster identifier"
  stacks.swarmStackFromGitRepositoryPayload:
    type: "object"
    required:
    - "name"
    - "repositoryURL"
    - "swarmID"
    properties:
      additionalFiles:
        type: "array"
        example:
        - "[nz.compose.yml"
        - " uat.compose.yml]"
        description: "Applicable when deploying with multiple stack files"
        items:
          type: "string"
      autoUpdate:
        description: "Optional auto update configuration"
        $ref: "#/definitions/portainer.StackAutoUpdate"
      composeFile:
        type: "string"
        example: "docker-compose.yml"
        description: "Path to the Stack file inside the Git repository"
        default: "docker-compose.yml"
      env:
        type: "array"
        description: "A list of environment(endpoint) variables used during stack\
          \ deployment"
        items:
          $ref: "#/definitions/portainer.Pair"
      fromAppTemplate:
        type: "boolean"
        example: false
        description: "Whether the stack is from a app template"
      name:
        type: "string"
        example: "myStack"
        description: "Name of the stack"
      repositoryAuthentication:
        type: "boolean"
        example: true
        description: "Use basic authentication to clone the Git repository"
      repositoryPassword:
        type: "string"
        example: "myGitPassword"
        description: "Password used in basic authentication. Required when RepositoryAuthentication\
          \ is true."
      repositoryReferenceName:
        type: "string"
        example: "refs/heads/master"
        description: "Reference name of a Git repository hosting the Stack file"
      repositoryURL:
        type: "string"
        example: "https://github.com/openfaas/faas"
        description: "URL of a Git repository hosting the Stack file"
      repositoryUsername:
        type: "string"
        example: "myGitUsername"
        description: "Username used in basic authentication. Required when RepositoryAuthentication\
          \ is true."
      swarmID:
        type: "string"
        example: "jpofkc0i9uo9wtx1zesuk649w"
        description: "Swarm cluster identifier"
  stacks.updateSwarmStackPayload:
    type: "object"
    properties:
      env:
        type: "array"
        description: "A list of environment(endpoint) variables used during stack\
          \ deployment"
        items:
          $ref: "#/definitions/portainer.Pair"
      prune:
        type: "boolean"
        example: true
        description: "Prune services that are no longer referenced (only available\
          \ for Swarm stacks)"
      pullImage:
        type: "boolean"
        example: false
        description: "Force a pulling to current image with the original tag though\
          \ the image is already the latest"
      stackFileContent:
        type: "string"
        example: "version: 3\n services:\n web:\n image:nginx"
        description: "New content of the Stack file"
  system.BuildInfo:
    type: "object"
    properties:
      buildNumber:
        type: "string"
      goVersion:
        type: "string"
      imageTag:
        type: "string"
      nodejsVersion:
        type: "string"
      webpackVersion:
        type: "string"
      yarnVersion:
        type: "string"
    example:
      nodejsVersion: "nodejsVersion"
      yarnVersion: "yarnVersion"
      goVersion: "goVersion"
      webpackVersion: "webpackVersion"
      imageTag: "imageTag"
      buildNumber: "buildNumber"
  system.nodesCountResponse:
    type: "object"
    properties:
      nodes:
        type: "integer"
    example:
      nodes: 0
  system.status:
    type: "object"
    properties:
      Version:
        type: "string"
        example: "2.0.0"
        description: "Portainer API version"
      demoEnvironment:
        $ref: "#/definitions/demo.EnvironmentDetails"
      instanceID:
        type: "string"
        example: "299ab403-70a8-4c05-92f7-bf7a994d50df"
        description: "Server Instance ID"
    example:
      demoEnvironment:
        environments:
        - 0
        - 0
        enabled: true
        users:
        - 1
        - 1
      instanceID: "299ab403-70a8-4c05-92f7-bf7a994d50df"
      Version: "2.0.0"
  system.systemInfoResponse:
    type: "object"
    properties:
      agents:
        type: "integer"
      edgeAgents:
        type: "integer"
      edgeDevices:
        type: "integer"
      platform:
        type: "string"
    example:
      edgeAgents: 6
      edgeDevices: 1
      platform: "platform"
      agents: 0
  system.versionResponse:
    type: "object"
    properties:
      LatestVersion:
        type: "string"
        example: "2.0.0"
        description: "The latest version available"
      UpdateAvailable:
        type: "boolean"
        example: false
        description: "Whether portainer has an update available"
      build:
        $ref: "#/definitions/system.BuildInfo"
      databaseVersion:
        type: "string"
      serverVersion:
        type: "string"
    example:
      serverVersion: "serverVersion"
      LatestVersion: "2.0.0"
      build:
        nodejsVersion: "nodejsVersion"
        yarnVersion: "yarnVersion"
        goVersion: "goVersion"
        webpackVersion: "webpackVersion"
        imageTag: "imageTag"
        buildNumber: "buildNumber"
      databaseVersion: "databaseVersion"
      UpdateAvailable: false
  tags.tagCreatePayload:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        example: "org/acme"
        description: "Name"
  teammemberships.teamMembershipCreatePayload:
    type: "object"
    required:
    - "role"
    - "teamID"
    - "userID"
    properties:
      role:
        type: "integer"
        example: 1
        description: "Role for the user inside the team (1 for leader and 2 for regular\
          \ member)"
      teamID:
        type: "integer"
        example: 1
        description: "Team identifier"
      userID:
        type: "integer"
        example: 1
        description: "User identifier"
  teammemberships.teamMembershipUpdatePayload:
    type: "object"
    required:
    - "role"
    - "teamID"
    - "userID"
    properties:
      role:
        type: "integer"
        example: 1
        description: "Role for the user inside the team (1 for leader and 2 for regular\
          \ member)"
      teamID:
        type: "integer"
        example: 1
        description: "Team identifier"
      userID:
        type: "integer"
        example: 1
        description: "User identifier"
  teams.teamCreatePayload:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        example: "developers"
        description: "Name"
      teamLeaders:
        type: "array"
        example:
        - 3
        - 5
        description: "TeamLeaders"
        items:
          type: "integer"
          example: 1
  teams.teamUpdatePayload:
    type: "object"
    properties:
      name:
        type: "string"
        example: "developers"
        description: "Name"
  templates.filePayload:
    type: "object"
    required:
    - "composeFilePathInRepository"
    - "repositoryURL"
    properties:
      composeFilePathInRepository:
        type: "string"
        example: "./subfolder/docker-compose.yml"
        description: "Path to the file inside the git repository"
      repositoryURL:
        type: "string"
        example: "https://github.com/portainer/portainer-compose"
        description: "URL of a git repository where the file is stored"
  templates.fileResponse:
    type: "object"
    properties:
      fileContent:
        type: "string"
        example: "version:2"
        description: "The requested file content"
    example:
      fileContent: "version:2"
  templates.listResponse:
    type: "object"
    properties:
      templates:
        type: "array"
        items:
          $ref: "#/definitions/portainer.Template"
      version:
        type: "string"
    example:
      templates:
      - image: "nginx:latest"
        note: "This is my <b>custom</b> template"
        registry: "quay.io"
        interactive: true
        volumes:
        - container: "/data"
          bind: "/tmp"
          readonly: true
        - container: "/data"
          bind: "/tmp"
          readonly: true
        description: "High performance web server"
        env:
        - default: "default_value"
          select:
          - default: false
            text: "text value"
            value: "value"
          - default: false
            text: "text value"
            value: "value"
          name: "MYSQL_ROOT_PASSWORD"
          description: "MySQL root account password"
          label: "Root password"
          preset: false
        - default: "default_value"
          select:
          - default: false
            text: "text value"
            value: "value"
          - default: false
            text: "text value"
            value: "value"
          name: "MYSQL_ROOT_PASSWORD"
          description: "MySQL root account password"
          label: "Root password"
          preset: false
        ports:
        - "8080:80/tcp"
        repository:
          stackfile: "./subfolder/docker-compose.yml"
          url: "https://github.com/portainer/portainer-compose"
        title: "Nginx"
        type: 1
        command: "ls -lah"
        platform: "linux"
        labels:
        - name: "name"
          value: "value"
        - name: "name"
          value: "value"
        network: "mynet"
        privileged: true
        hostname: "mycontainer"
        stackFile: "stackFile"
        restart_policy: "on-failure"
        administrator_only: true
        name: "mystackname"
        logo: "https://cloudinovasi.id/assets/img/logos/nginx.png"
        Id: 1
        categories:
        - "database"
      - image: "nginx:latest"
        note: "This is my <b>custom</b> template"
        registry: "quay.io"
        interactive: true
        volumes:
        - container: "/data"
          bind: "/tmp"
          readonly: true
        - container: "/data"
          bind: "/tmp"
          readonly: true
        description: "High performance web server"
        env:
        - default: "default_value"
          select:
          - default: false
            text: "text value"
            value: "value"
          - default: false
            text: "text value"
            value: "value"
          name: "MYSQL_ROOT_PASSWORD"
          description: "MySQL root account password"
          label: "Root password"
          preset: false
        - default: "default_value"
          select:
          - default: false
            text: "text value"
            value: "value"
          - default: false
            text: "text value"
            value: "value"
          name: "MYSQL_ROOT_PASSWORD"
          description: "MySQL root account password"
          label: "Root password"
          preset: false
        ports:
        - "8080:80/tcp"
        repository:
          stackfile: "./subfolder/docker-compose.yml"
          url: "https://github.com/portainer/portainer-compose"
        title: "Nginx"
        type: 1
        command: "ls -lah"
        platform: "linux"
        labels:
        - name: "name"
          value: "value"
        - name: "name"
          value: "value"
        network: "mynet"
        privileged: true
        hostname: "mycontainer"
        stackFile: "stackFile"
        restart_policy: "on-failure"
        administrator_only: true
        name: "mystackname"
        logo: "https://cloudinovasi.id/assets/img/logos/nginx.png"
        Id: 1
        categories:
        - "database"
      version: "version"
  users.accessTokenResponse:
    type: "object"
    properties:
      apiKey:
        $ref: "#/definitions/portainer.APIKey"
      rawAPIKey:
        type: "string"
    example:
      apiKey:
        lastUsed: 1
        dateCreated: 0
        prefix: "prefix"
        digest:
        - 6
        - 6
        description: "portainer-api-key"
        id: 1
        userId: 1
      rawAPIKey: "rawAPIKey"
  users.adminInitPayload:
    type: "object"
    required:
    - "password"
    - "username"
    properties:
      password:
        type: "string"
        example: "admin-password"
        description: "Password for the admin user"
      username:
        type: "string"
        example: "admin"
        description: "Username for the admin user"
  users.themePayload:
    type: "object"
    properties:
      color:
        type: "string"
        example: "dark"
        description: "Color represents the color theme of the UI"
        enum:
        - "dark"
        - "light"
        - "highcontrast"
        - "auto"
      subtleUpgradeButton:
        type: "boolean"
        example: false
        description: "SubtleUpgradeButton indicates if the upgrade banner should be\
          \ displayed in a subtle way"
  users.userAccessTokenCreatePayload:
    type: "object"
    required:
    - "description"
    properties:
      description:
        type: "string"
        example: "github-api-key"
  users.userCreatePayload:
    type: "object"
    required:
    - "password"
    - "role"
    - "username"
    properties:
      password:
        type: "string"
        example: "cg9Wgky3"
      role:
        type: "integer"
        example: 2
        description: "User role (1 for administrator account and 2 for regular account)"
      username:
        type: "string"
        example: "bob"
  users.userUpdatePasswordPayload:
    type: "object"
    required:
    - "newPassword"
    - "password"
    properties:
      newPassword:
        type: "string"
        example: "new_passwd"
        description: "New Password"
      password:
        type: "string"
        example: "passwd"
        description: "Current Password"
  users.userUpdatePayload:
    type: "object"
    required:
    - "password"
    - "role"
    - "username"
    properties:
      password:
        type: "string"
        example: "cg9Wgky3"
      role:
        type: "integer"
        example: 2
        description: "User role (1 for administrator account and 2 for regular account)"
      theme:
        $ref: "#/definitions/users.themePayload"
      username:
        type: "string"
        example: "bob"
  webhooks.webhookCreatePayload:
    type: "object"
    properties:
      endpointID:
        type: "integer"
      registryID:
        type: "integer"
        example: 1
        description: "Registry Identifier"
      resourceID:
        type: "string"
      webhookType:
        type: "integer"
  webhooks.webhookUpdatePayload:
    type: "object"
    properties:
      registryID:
        type: "integer"
  portainer.Endpoint_agent:
    type: "object"
    properties:
      version:
        type: "string"
        example: "1.0.0"
    example:
      version: "1.0.0"
  portainer.Endpoint_edge:
    type: "object"
    properties:
      CommandInterval:
        type: "integer"
        example: 60
        description: "The command list interval for edge agent - used in edge async\
          \ mode [seconds]"
      PingInterval:
        type: "integer"
        example: 60
        description: "The ping interval for edge agent - used in edge async mode [seconds]"
      SnapshotInterval:
        type: "integer"
        example: 60
        description: "The snapshot interval for edge agent - used in edge async mode\
          \ [seconds]"
      asyncMode:
        type: "boolean"
        description: "Whether the device has been started in edge async mode"
    example:
      CommandInterval: 60
      SnapshotInterval: 60
      PingInterval: 60
      asyncMode: true
  portainer.Settings_edge:
    type: "object"
    properties:
      CommandInterval:
        type: "integer"
        example: 5
        description: "The command list interval for edge agent - used in edge async\
          \ mode (in seconds)"
      PingInterval:
        type: "integer"
        example: 5
        description: "The ping interval for edge agent - used in edge async mode (in\
          \ seconds)"
      SnapshotInterval:
        type: "integer"
        example: 5
        description: "The snapshot interval for edge agent - used in edge async mode\
          \ (in seconds)"
      asyncMode:
        type: "boolean"
        description: "EdgeAsyncMode enables edge async mode by default"
    example:
      CommandInterval: 5
      SnapshotInterval: 5
      PingInterval: 5
      asyncMode: true
  settings.publicSettingsResponse_edge:
    type: "object"
    properties:
      CommandInterval:
        type: "integer"
        example: 60
        description: "The command list interval for edge agent - used in edge async\
          \ mode [seconds]"
      PingInterval:
        type: "integer"
        example: 60
        description: "The ping interval for edge agent - used in edge async mode [seconds]"
      SnapshotInterval:
        type: "integer"
        example: 60
        description: "The snapshot interval for edge agent - used in edge async mode\
          \ [seconds]"
      asyncMode:
        type: "boolean"
        description: "Whether the device has been started in edge async mode"
      checkinInterval:
        type: "integer"
        example: 60
        description: "The check in interval for edge agent (in seconds) - used in\
          \ non async mode [seconds]"
    example:
      CommandInterval: 60
      SnapshotInterval: 60
      checkinInterval: 60
      PingInterval: 60
      asyncMode: true
